{"version":3,"sources":["accounts.js"],"names":["getCurrentUserAsync","console","log","yellow","questions","type","name","message","choices","value","action","register","login","loginOrRegisterIfLoggedOut","options","user","nonInteractive","question","green","username","_usernamePasswordAuth","password","push","validate","val","trim","answers","data","loginAsync","Error","filter","registerAsync","registeredUser","initialize"],"mappings":"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","file":"../accounts.js","sourcesContent":["/**\n * @flow\n */\n\nimport chalk from 'chalk';\n\nimport { User as UserManager } from 'xdl';\nimport CommandError from './CommandError';\nimport prompt from './prompt';\n\nimport type { LoginType, User } from 'xdl/build/User';\n\nUserManager.initialize();\n\ntype CommandOptions = {\n  username?: string,\n  password?: string,\n};\n\nexport async function loginOrRegisterIfLoggedOut() {\n  if (await UserManager.getCurrentUserAsync()) {\n    return;\n  }\n\n  console.log(chalk.yellow('\\nAn Expo user account is required to proceed.\\n'));\n\n  const questions = [\n    {\n      type: 'list',\n      name: 'action',\n      message: 'How would you like to authenticate?',\n      choices: [\n        {\n          name: 'Make a new Expo account',\n          value: 'register',\n        },\n        {\n          name: 'Log in with an existing Expo account',\n          value: 'existingUser',\n        },\n        {\n          name: 'Cancel',\n          value: 'cancel',\n        },\n      ],\n    },\n  ];\n\n  const { action } = await prompt(questions);\n\n  if (action === 'register') {\n    await register();\n  } else if (action === 'existingUser') {\n    await login({});\n  } else {\n    throw new CommandError('BAD_CHOICE', 'Not logged in.');\n  }\n}\n\nexport async function login(options: CommandOptions) {\n  const user = await UserManager.getCurrentUserAsync();\n  if (!options.nonInteractive) {\n    if (user) {\n      const question = [\n        {\n          type: 'confirm',\n          name: 'action',\n          message: `You are already logged in as ${chalk.green(\n            user.username\n          )}. Log in as new user?`,\n        },\n      ];\n\n      const { action } = await prompt(question);\n      if (!action) {\n        // If user chooses to stay logged in, return\n        return;\n      }\n    }\n    return _usernamePasswordAuth(options.username, options.password);\n  } else if (options.username && options.password) {\n    return _usernamePasswordAuth(options.username, options.password);\n  } else {\n    throw new CommandError(\n      'NON_INTERACTIVE',\n      'Username and password not provided in non-interactive mode.'\n    );\n  }\n}\n\nasync function _usernamePasswordAuth(username?: string, password?: string): Promise<User> {\n  const questions = [];\n  if (!username) {\n    questions.push({\n      type: 'input',\n      name: 'username',\n      message: 'Username/Email Address:',\n      validate(val) {\n        if (val.trim() === '') {\n          return false;\n        }\n        return true;\n      },\n    });\n  }\n\n  if (!password) {\n    questions.push({\n      type: 'password',\n      name: 'password',\n      message: 'Password:',\n      validate(val) {\n        if (val.trim() === '') {\n          return false;\n        }\n        return true;\n      },\n    });\n  }\n\n  const answers = await prompt(questions);\n\n  const data = {\n    username: username || answers.username,\n    password: password || answers.password,\n  };\n\n  let user = await UserManager.loginAsync('user-pass', data);\n\n  if (user) {\n    console.log(`\\nSuccess. You are now logged in as ${chalk.green(user.username)}.`);\n    return user;\n  } else {\n    throw new Error('Unexpected Error: No user returned from the API');\n  }\n}\n\nexport async function register(): Promise<User> {\n  console.log(\n    `\nThanks for signing up for Expo!\nJust a few questions:\n`\n  );\n\n  let questions = [\n    {\n      type: 'input',\n      name: 'email',\n      message: 'E-mail:',\n      filter: val => val.trim(),\n      validate(val) {\n        if (val.trim() === '') {\n          return false;\n        }\n        return true;\n      },\n    },\n    {\n      type: 'input',\n      name: 'username',\n      message: 'Username:',\n      filter: val => val.trim(),\n      validate(val) {\n        if (val.trim() === '') {\n          return false;\n        }\n        return true;\n      },\n    },\n    {\n      type: 'password',\n      name: 'password',\n      message: 'Password:',\n      filter: val => val.trim(),\n      validate(val) {\n        if (val.trim() === '') {\n          return 'Please create a password';\n        }\n        return true;\n      },\n    },\n    {\n      type: 'password',\n      name: 'passwordRepeat',\n      message: 'Confirm Password:',\n      validate(val, answers) {\n        if (val.trim() === '') {\n          return false;\n        }\n        if (val.trim() !== answers.password.trim()) {\n          return `Passwords don't match!`;\n        }\n        return true;\n      },\n    },\n  ];\n  let answers = await prompt(questions);\n  let registeredUser = await UserManager.registerAsync(answers);\n  console.log('\\nThanks for signing up!');\n  return registeredUser;\n}\n"],"sourceRoot":"/exp@55.0.5/src"}