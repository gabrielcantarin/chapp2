{"version":3,"sources":["commands/build.js"],"names":["program","command","alias","option","description","asyncActionProjectDir","projectDir","options","channelRe","RegExp","test","releaseChannel","error","process","exit","type","undefined","iosBuilder","androidBuilder","builder","checkStatus"],"mappings":"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","file":"../../commands/build.js","sourcesContent":["/**\n * @flow\n */\n\nimport BaseBuilder from './build/BaseBuilder';\nimport IOSBuilder from './build/IOSBuilder';\nimport AndroidBuilder from './build/AndroidBuilder';\nimport BuildError from './build/BuildError';\nimport log from '../log';\n\nexport default (program: any) => {\n  program\n    .command('build:ios [project-dir]')\n    .alias('bi')\n    .option('-c, --clear-credentials', 'Clear credentials stored on expo servers')\n    .option(\n      '--clear-app-credentials',\n      'Remove app related credentials stored on expo servers (iOS)'\n    )\n    .option('--clear-dist-cert', 'Remove distribution cert stored on expo servers (iOS)')\n    .option('-e, --apple-enterprise-account', 'Run as Apple Enterprise account')\n    .option(\n      '--revoke-apple-dist-certs',\n      'Revoke distribution certs on developer.apple.com before attempting to make new certs, must use with -c'\n    )\n    .option(\n      '--revoke-apple-push-certs',\n      'Revoke push certs on developer.apple.com before attempting to make new certs, must use with -c'\n    )\n    .option(\n      '--revoke-apple-provisioning-profile',\n      'Revoke provisioning profile on developer.apple.com, must use with -c'\n    )\n    .option('-t --type <build>', 'Type of build: [archive|simulator].', /^(archive|simulator)$/i)\n    .option('--release-channel <channel-name>', 'Pull from specified release channel.', 'default')\n    .option('--no-publish', 'Disable automatic publishing before building.')\n    .option('--no-wait', 'Exit immediately after triggering build.')\n    .option('--team-id <apple-teamId>', 'Apple Team ID.')\n    .option('--dist-p12-path <dist.p12>', 'Path to your Distribution Certificate P12.')\n    .option('--push-p12-path <push.p12>', 'Path to your Push Notification Certificate P12.')\n    .option('--provisioning-profile-path <.mobileprovision>', 'Path to your Provisioning Profile.')\n    .description(\n      'Build a standalone IPA for your project, signed and ready for submission to the Apple App Store.'\n    )\n    .asyncActionProjectDir((projectDir, options) => {\n      let channelRe = new RegExp(/^[a-z\\d][a-z\\d._-]*$/);\n      if (!channelRe.test(options.releaseChannel)) {\n        log.error(\n          'Release channel name can only contain lowercase letters, numbers and special characters . _ and -'\n        );\n        process.exit(1);\n      }\n      if (\n        options.type !== undefined &&\n        options.type !== 'archive' &&\n        options.type !== 'simulator'\n      ) {\n        log.error('Build type must be one of {archive, simulator}');\n        process.exit(1);\n      }\n      const iosBuilder = new IOSBuilder(projectDir, options);\n      return iosBuilder.command();\n    });\n\n  program\n    .command('build:android [project-dir]')\n    .alias('ba')\n    .option('-c, --clear-credentials', 'Clear stored credentials.')\n    .option('--release-channel <channel-name>', 'Pull from specified release channel.', 'default')\n    .option('--no-publish', 'Disable automatic publishing before building.')\n    .option('--no-wait', 'Exit immediately after triggering build.')\n    .option('--keystore-path <app.jks>', 'Path to your Keystore.')\n    .option('--keystore-alias <alias>', 'Keystore Alias')\n    .description(\n      'Build a standalone APK for your project, signed and ready for submission to the Google Play Store.'\n    )\n    .asyncActionProjectDir((projectDir, options) => {\n      let channelRe = new RegExp(/^[a-z\\d][a-z\\d._-]*$/);\n      if (!channelRe.test(options.releaseChannel)) {\n        log.error(\n          'Release channel name can only contain lowercase letters, numbers and special characters . _ and -'\n        );\n        process.exit(1);\n      }\n      const androidBuilder = new AndroidBuilder(projectDir, options);\n      return androidBuilder.command();\n    });\n\n  program\n    .command('build:status [project-dir]')\n    .alias('bs')\n    .description(`Gets the status of a current (or most recently finished) build for your project.`)\n    .asyncActionProjectDir(async (projectDir, options) => {\n      const builder = new BaseBuilder(projectDir, options);\n      try {\n        return await builder.checkStatus('all', false);\n      } catch (e) {\n        if (e instanceof BuildError) {\n          return;\n        }\n        throw e;\n      }\n    }, /* skipProjectValidation: */ true);\n};\n"],"sourceRoot":"/exp@55.0.5/src"}