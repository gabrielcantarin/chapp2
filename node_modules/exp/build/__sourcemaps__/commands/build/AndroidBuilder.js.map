{"version":3,"sources":["commands/build/AndroidBuilder.js"],"names":["AndroidBuilder","checkStatus","validateProject","collectAndValidateCredentials","ensureReleaseExists","publishedExpIds","build","getPublishInfoAsync","projectDir","args","username","remotePackageName","experienceName","remoteFullPackageName","credentialMetadata","platform","warn","red","questions","type","name","message","answers","confirm","backupKeystoreOutputPath","resolve","backupExistingAndroidCredentials","outputPath","log","removeCredentialsForPlatform","credentialsExistForPlatformAsync","credentialsExist","checkEnv","collectAndValidateCredentialsFromCI","options","clearCredentials","console","choices","value","validate","keystorePath","stat","keystorePathStats","isFile","filter","isAbsolute","when","uploadKeystore","val","password","_clearCredentials","keystoreAlias","keystorePassword","keyPassword","readFile","keystoreData","credentials","keystore","toString","updateCredentialsForPlatform","process","env","EXPO_ANDROID_KEYSTORE_PASSWORD","EXPO_ANDROID_KEY_PASSWORD","sdkVersion","checkIfSdkIsSupported"],"mappings":"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","file":"../../../commands/build/AndroidBuilder.js","sourcesContent":["/**\n * @flow\n */\n\nimport fs from 'fs-extra';\nimport path from 'path';\nimport untildify from 'untildify';\nimport { Exp, Credentials } from 'xdl';\nimport chalk from 'chalk';\nimport log from '../../log';\n\nimport BaseBuilder from './BaseBuilder';\nimport prompt from '../../prompt';\n\nexport default class AndroidBuilder extends BaseBuilder {\n  async run() {\n    // Check the status of any current builds\n    await this.checkStatus('android');\n    // Validate project\n    await this.validateProject();\n    // Check for existing credentials, collect any missing credentials, and validate them\n    await this.collectAndValidateCredentials();\n    // Publish the current experience, if necessary\n    const publishedExpIds = await this.ensureReleaseExists('android');\n    // Initiate a build\n    await this.build(publishedExpIds, 'android');\n  }\n\n  async _clearCredentials() {\n    const {\n      args: { username, remotePackageName, remoteFullPackageName: experienceName },\n    } = await Exp.getPublishInfoAsync(this.projectDir);\n\n    const credentialMetadata = {\n      username,\n      experienceName,\n      platform: 'android',\n    };\n\n    log.warn(\n      `Clearing your Android build credentials from our build servers is a ${chalk.red(\n        'PERMANENT and IRREVERSIBLE action.'\n      )}`\n    );\n    log.warn(\n      'Android keystores must be identical to the one previously used to submit your app to the Google Play Store.'\n    );\n    log.warn(\n      'Please read https://docs.expo.io/versions/latest/guides/building-standalone-apps.html#if-you-choose-to-build-for-android for more info before proceeding.'\n    );\n    log.warn(\n      \"We'll store a backup of your Android keystore in this directory in case you decide to delete it from our servers.\"\n    );\n    let questions = [\n      {\n        type: 'confirm',\n        name: 'confirm',\n        message: 'Permanently delete the Android build credentials from our servers?',\n      },\n    ];\n\n    const answers = await prompt(questions);\n\n    if (answers.confirm) {\n      log('Backing up your Android keystore now...');\n      const backupKeystoreOutputPath = path.resolve(\n        this.projectDir,\n        `${remotePackageName}.jks.bak`\n      );\n      await Credentials.backupExistingAndroidCredentials({\n        outputPath: backupKeystoreOutputPath,\n        username,\n        experienceName,\n        log,\n      });\n      await Credentials.removeCredentialsForPlatform('android', credentialMetadata);\n      log.warn('Removed existing credentials from Expo servers');\n    }\n  }\n\n  async collectAndValidateCredentials() {\n    const {\n      args: { username, remoteFullPackageName: experienceName },\n    } = await Exp.getPublishInfoAsync(this.projectDir);\n\n    const credentialMetadata = {\n      username,\n      experienceName,\n      platform: 'android',\n    };\n\n    const credentialsExist = await Credentials.credentialsExistForPlatformAsync(credentialMetadata);\n\n    if (this.checkEnv()) {\n      await this.collectAndValidateCredentialsFromCI(credentialMetadata);\n    } else if (this.options.clearCredentials || !credentialsExist) {\n      console.log('');\n      const questions = [\n        {\n          type: 'rawlist',\n          name: 'uploadKeystore',\n          message: `Would you like to upload a keystore or have us generate one for you?\\nIf you don't know what this means, let us handle it! :)\\n`,\n          choices: [\n            { name: 'Let Expo handle the process!', value: false },\n            { name: 'I want to upload my own keystore!', value: true },\n          ],\n        },\n        {\n          type: 'input',\n          name: 'keystorePath',\n          message: `Path to keystore:`,\n          validate: async keystorePath => {\n            try {\n              const keystorePathStats = await fs.stat(keystorePath);\n              return keystorePathStats.isFile();\n            } catch (e) {\n              // file does not exist\n              console.log('\\nFile does not exist.');\n              return false;\n            }\n          },\n          filter: keystorePath => {\n            keystorePath = untildify(keystorePath);\n            if (!path.isAbsolute(keystorePath)) {\n              keystorePath = path.resolve(keystorePath);\n            }\n            return keystorePath;\n          },\n          when: answers => answers.uploadKeystore,\n        },\n        {\n          type: 'input',\n          name: 'keystoreAlias',\n          message: `Keystore Alias:`,\n          validate: val => val !== '',\n          when: answers => answers.uploadKeystore,\n        },\n        {\n          type: 'password',\n          name: 'keystorePassword',\n          message: `Keystore Password:`,\n          validate: val => val !== '',\n          when: answers => answers.uploadKeystore,\n        },\n        {\n          type: 'password',\n          name: 'keyPassword',\n          message: `Key Password:`,\n          validate: (password, answers) => {\n            if (password === '') {\n              return false;\n            }\n            // Todo validate keystore passwords\n            return true;\n          },\n          when: answers => answers.uploadKeystore,\n        },\n      ];\n\n      const answers = await prompt(questions);\n\n      if (!answers.uploadKeystore) {\n        if (this.options.clearCredentials && credentialsExist) {\n          await this._clearCredentials();\n        }\n        // just continue\n      } else {\n        const { keystorePath, keystoreAlias, keystorePassword, keyPassword } = answers;\n\n        // read the keystore\n        const keystoreData = await fs.readFile(keystorePath);\n\n        const credentials = {\n          keystore: keystoreData.toString('base64'),\n          keystoreAlias,\n          keystorePassword,\n          keyPassword,\n        };\n        await Credentials.updateCredentialsForPlatform('android', credentials, credentialMetadata);\n      }\n    }\n  }\n\n  checkEnv() {\n    return (\n      this.options.keystorePath &&\n      this.options.keystoreAlias &&\n      process.env.EXPO_ANDROID_KEYSTORE_PASSWORD &&\n      process.env.EXPO_ANDROID_KEY_PASSWORD\n    );\n  }\n\n  async collectAndValidateCredentialsFromCI(credentialMetadata) {\n    const credentials = {\n      keystore: (await fs.readFile(this.options.keystorePath)).toString('base64'),\n      keystoreAlias: this.options.keystoreAlias,\n      keystorePassword: process.env.EXPO_ANDROID_KEYSTORE_PASSWORD,\n      keyPassword: process.env.EXPO_ANDROID_KEY_PASSWORD,\n    };\n    await Credentials.updateCredentialsForPlatform('android', credentials, credentialMetadata);\n  }\n\n  async validateProject() {\n    const { args: { sdkVersion } } = await Exp.getPublishInfoAsync(this.projectDir);\n    await this.checkIfSdkIsSupported(sdkVersion, 'android');\n  }\n}\n"],"sourceRoot":"/exp@55.0.5/src"}