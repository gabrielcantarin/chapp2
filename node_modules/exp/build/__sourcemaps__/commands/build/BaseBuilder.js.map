{"version":3,"sources":["commands/build/BaseBuilder.js"],"names":["sleep","setTimeout","res","ms","secondsToMilliseconds","seconds","BaseBuilder","projectDir","options","wait","clearCredentials","releaseChannel","publish","_checkProjectConfig","run","error","message","process","exit","readConfigJsonAsync","exp","isDetached","platform","current","buildAsync","mode","buildStatus","err","Error","jobs","length","raw","forEach","job","i","packageExtension","constructBuildLogsUrl","id","status","artifacts","url","hardcodeRevisionId","ids","getLatestReleaseAsync","release","channel","publicationId","publishedTime","buildId","timeout","interval","time","Date","getTime","endTime","compose","head","filter","getOr","expIds","extraArgs","opts","type","bundleIdentifier","underline","start","completedJob","stop","artifactUrl","artifactId","constructArtifactUrl","green","sdkVersion","canTurtleBuildSdkVersion","isSupported","storeName","red","getExpoDomainUrl","env","EXPO_STAGING","EXPO_LOCAL"],"mappings":"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","file":"../../../commands/build/BaseBuilder.js","sourcesContent":["/**\n * @flow\n */\n\nimport { Project, ProjectUtils, Versions } from 'xdl';\nimport chalk from 'chalk';\nimport fp from 'lodash/fp';\nimport simpleSpinner from '@expo/simple-spinner';\n\nimport log from '../../log';\nimport { action as publishAction } from '../publish';\nimport BuildError from './BuildError';\n\nconst sleep = ms => new Promise(res => setTimeout(res, ms));\nconst secondsToMilliseconds = seconds => seconds * 1000;\n\ntype BuilderOptions = {\n  wait: boolean,\n  clearCredentials: boolean,\n  type?: string,\n  releaseChannel: string,\n  publish: boolean,\n  teamId?: string,\n  distP12Path?: string,\n  pushP12Path?: string,\n  provisioningProfilePath?: string,\n};\n\nexport default class BaseBuilder {\n  projectDir: string = '';\n  options: BuilderOptions = {\n    wait: true,\n    clearCredentials: false,\n    releaseChannel: 'default',\n    publish: false,\n  };\n  run: () => Promise<void>;\n\n  constructor(projectDir: string, options: BuilderOptions) {\n    this.projectDir = projectDir;\n    this.options = options;\n  }\n\n  async command() {\n    try {\n      await this._checkProjectConfig();\n      await this.run();\n    } catch (e) {\n      if (!(e instanceof BuildError)) {\n        throw e;\n      } else {\n        log.error(e.message);\n        process.exit(1);\n      }\n    }\n  }\n\n  async _checkProjectConfig(): Promise<void> {\n    let { exp } = await ProjectUtils.readConfigJsonAsync(this.projectDir);\n    if (exp.isDetached) {\n      log.error(`\\`exp build\\` is not supported for detached projects.`);\n      process.exit(1);\n    }\n  }\n\n  async checkStatus(platform: string = 'all', current: boolean = true): Promise<void> {\n    await this._checkProjectConfig();\n\n    log('Checking if current build exists...\\n');\n\n    const buildStatus = await Project.buildAsync(this.projectDir, {\n      mode: 'status',\n      platform,\n      current,\n    });\n\n    if (buildStatus.err) {\n      throw new Error('Error getting current build status for this project.');\n    }\n\n    if (!(buildStatus.jobs && buildStatus.jobs.length)) {\n      log('No currently active or previous builds for this project.');\n      return;\n    }\n\n    log.raw();\n    log('=================');\n    log(' Builds Statuses ');\n    log('=================\\n');\n    buildStatus.jobs.forEach((job, i) => {\n      let platform, packageExtension;\n      if (job.platform === 'ios') {\n        platform = 'iOS';\n        packageExtension = 'IPA';\n      } else {\n        platform = 'Android';\n        packageExtension = 'APK';\n      }\n\n      log(`### ${i} | ${platform} | ${constructBuildLogsUrl(job.id)} ###`);\n\n      let status;\n      switch (job.status) {\n        case 'pending':\n        case 'sent-to-queue':\n          status = 'Build waiting in queue...';\n          break;\n        case 'started':\n          status = 'Build started...';\n          break;\n        case 'in-progress':\n          status = 'Build in progress...';\n          break;\n        case 'finished':\n          status = 'Build finished.';\n          break;\n        case 'errored':\n          status = 'There was an error with this build.';\n          if (buildStatus.id) {\n            status += `\n\nWhen requesting support, please provide this build ID:\n\n${buildStatus.id}\n`;\n          }\n          break;\n        default:\n          status = '';\n          break;\n      }\n\n      log(status);\n      if (job.status === 'finished') {\n        if (job.artifacts) {\n          log(`${packageExtension}: ${job.artifacts.url}`);\n        } else {\n          log(`Problem getting ${packageExtension} URL. Please try to build again.`);\n        }\n      }\n      log();\n    });\n\n    throw new BuildError('Cannot start new build, as there is a build in progress.');\n  }\n\n  async ensureReleaseExists(platform: string) {\n    if (this.options.hardcodeRevisionId) {\n      // Used for sandbox build\n      return [this.options.hardcodeRevisionId];\n    }\n\n    if (this.options.publish) {\n      const { ids, url, err } = await publishAction(this.projectDir, {\n        ...this.options,\n        platform,\n      });\n      if (err) {\n        throw new BuildError(`No url was returned from publish. Please try again.\\n${err}`);\n      } else if (!url || url === '') {\n        throw new BuildError('No url was returned from publish. Please try again.');\n      }\n      return ids;\n    } else {\n      log('Looking for releases...');\n      const release = await Project.getLatestReleaseAsync(this.projectDir, {\n        releaseChannel: this.options.releaseChannel,\n        platform,\n      });\n      if (!release) {\n        throw new BuildError('No releases found. Please create one using `exp publish` first.');\n      }\n      log(\n        `Using existing release on channel \"${release.channel}\":\\n  publicationId: ${release.publicationId}\\n  publishedTime: ${release.publishedTime}`\n      );\n      return [release.publicationId];\n    }\n  }\n\n  async wait(buildId, { timeout = 1200, interval = 60 } = {}) {\n    let time = new Date().getTime();\n    log(`Waiting for build to complete. You can press Ctrl+C to exit.`);\n    await sleep(secondsToMilliseconds(interval));\n    const endTime = time + secondsToMilliseconds(timeout);\n    while (time <= endTime) {\n      const res = await Project.buildAsync(this.projectDir, { current: false, mode: 'status' });\n      const job = fp.compose(\n        fp.head,\n        fp.filter(job => buildId && job.id === buildId),\n        fp.getOr([], 'jobs')\n      )(res);\n      switch (job.status) {\n        case 'finished':\n          return job;\n        case 'pending':\n        case 'sent-to-queue':\n        case 'started':\n        case 'in-progress':\n          break;\n        case 'errored':\n          throw new BuildError(`Standalone build failed!`);\n        default:\n          throw new BuildError(`Unknown status: ${job.status} - aborting!`);\n      }\n      time = new Date().getTime();\n      await sleep(secondsToMilliseconds(interval));\n    }\n    throw new BuildError(\n      'Timeout reached! Project is taking longer than expected to finish building, aborting wait...'\n    );\n  }\n\n  async build(\n    expIds: Array<string>,\n    platform: string,\n    extraArgs: { bundleIdentifier?: string } = {}\n  ) {\n    log('Building...');\n\n    let opts = {\n      mode: 'create',\n      expIds,\n      platform,\n      releaseChannel: this.options.releaseChannel,\n    };\n\n    if (platform === 'ios') {\n      opts = {\n        ...opts,\n        type: this.options.type,\n        bundleIdentifier: extraArgs.bundleIdentifier,\n      };\n    }\n\n    // call out to build api here with url\n    const { id: buildId } = await Project.buildAsync(this.projectDir, opts);\n\n    log('Build started, it may take a few minutes to complete.');\n\n    if (buildId) {\n      log(`You can monitor the build at\\n\\n ${chalk.underline(constructBuildLogsUrl(buildId))}\\n`);\n    }\n\n    if (this.options.wait) {\n      simpleSpinner.start();\n      const completedJob = await this.wait(buildId);\n      simpleSpinner.stop();\n      const artifactUrl = completedJob.artifactId\n        ? constructArtifactUrl(completedJob.artifactId)\n        : completedJob.artifacts.url;\n      log(`${chalk.green('Successfully built standalone app:')} ${chalk.underline(artifactUrl)}`);\n    } else {\n      log('Alternatively, run `exp build:status` to monitor it from the command line.');\n    }\n  }\n\n  async checkIfSdkIsSupported(sdkVersion: string, platform: string) {\n    const isSupported = await Versions.canTurtleBuildSdkVersion(sdkVersion, platform);\n    if (!isSupported) {\n      const storeName = platform === 'ios' ? 'Apple App Store' : 'Google Play Store';\n      log.error(\n        chalk.red(\n          `Unsupported SDK version: our app builders don't have support for ${sdkVersion} version yet. Submitting the app to the ${storeName} may result in an unexpected behaviour`\n        )\n      );\n    }\n  }\n}\n\nfunction constructBuildLogsUrl(buildId: string): string {\n  return `${getExpoDomainUrl()}/builds/${buildId}`;\n}\n\nfunction constructArtifactUrl(artifactId: string): string {\n  return `${getExpoDomainUrl()}/artifacts/${artifactId}`;\n}\n\nfunction getExpoDomainUrl() {\n  if (process.env.EXPO_STAGING) {\n    return `https://staging.expo.io`;\n  } else if (process.env.EXPO_LOCAL) {\n    return `http://expo.test`;\n  } else {\n    return `https://expo.io`;\n  }\n}\n"],"sourceRoot":"/exp@55.0.5/src"}