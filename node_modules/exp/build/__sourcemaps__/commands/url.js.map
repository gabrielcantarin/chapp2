{"version":3,"sources":["commands/url.js"],"names":["projectDir","options","optsAsync","currentStatus","parent","name","constructManifestUrlAsync","url","printQRCode","underline","raw","handleMobileOptsAsync","action","logArtifactUrl","buildAsync","current","mode","res","compose","get","head","filter","platform","job","getOr","nested","Error","program","command","alias","description","urlOpts","allowOffline","asyncActionProjectDir"],"mappings":";;;;;;;;;;;;;;;;;;;6IAyBA,kBAAsBA,UAAtB,EAAkCC,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACQ,sCAAQC,SAAR,CAAkBF,UAAlB,EAA8BC,OAA9B,CADR;;AAAA;AAAA;AAAA,mBAGa,8BAAQE,aAAR,CAAsBH,UAAtB,CAHb;;AAAA;AAAA;;AAAA,mCAGoD,SAHpD;AAAA;AAAA;AAAA;;AAAA,kBAIU,oDACJ,aADI,qDAE8CC,QAAQG,MAAR,CAAeC,IAF7D,cAJV;;AAAA;AAAA;AAAA,mBASoB,+BAASC,yBAAT,CAAmCN,UAAnC,CATpB;;AAAA;AASQO,eATR;;;AAWE,kDAAQC,WAAR,CAAoBD,GAApB;;AAEA,+CAAI,oBAAoB,kCAAME,SAAN,CAAgBF,GAAhB,CAApB,GAA2C,IAA/C;AACA,0CAAIG,GAAJ,CAAQH,GAAR;;AAdF;AAAA,mBAgBQ,gFAhBR;;AAAA;AAAA;AAAA,mBAiBQ,sCAAQI,qBAAR,CAA8BX,UAA9B,EAA0CC,OAA1C,CAjBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeW,M;;;;;;;AAzBf;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAEA,IAAMC,iBAAiB,SAAjBA,cAAiB;AAAA;AAAA,8IAAY,iBAAOb,UAAP,EAAmBC,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACf,8BAAQa,UAAR,CAAmBd,UAAnB,EAA+B,EAAEe,SAAS,KAAX,EAAkBC,MAAM,QAAxB,EAA/B,CADe;;AAAA;AAC3BC,iBAD2B;AAE3BV,iBAF2B,GAErB,4BAAGW,OAAH,CACV,4BAAGC,GAAH,CAAO,CAAC,WAAD,EAAc,KAAd,CAAP,CADU,EAEV,4BAAGC,IAFO,EAGV,4BAAGC,MAAH,CAAU;AAAA,uBAAOC,YAAYC,IAAID,QAAJ,KAAiBA,QAApC;AAAA,eAAV,CAHU,EAIV,4BAAGE,KAAH,CAAS,EAAT,EAAa,MAAb,CAJU,EAKVP,GALU,CAFqB;;AAAA,mBAQ7BV,GAR6B;AAAA;AAAA;AAAA;;AAS/B,4CAAIkB,MAAJ,CAAWlB,GAAX;AAT+B;AAAA;;AAAA;AAAA,oBAWzB,IAAImB,KAAJ,SAAgBJ,QAAhB,2CAA8DA,QAA9D,sBAXyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;kBAmCe,mBAAW;AACxBK,UACGC,OADH,CACW,mBADX,EAEGC,KAFH,CAES,GAFT,EAGGC,WAHH,CAGe,2DAHf,EAIGC,OAJH,GAKGC,YALH,GAMGC,qBANH,CAMyBrB,MANzB,EAMiC,4BAA6B,IAN9D,EAMoE,oBAAqB,IANzF;;AAQAe,UACGC,OADH,CACW,uBADX,EAEGE,WAFH,CAEe,gFAFf,EAGGG,qBAHH,CAGyBpB,eAAe,KAAf,CAHzB,EAGgD,IAHhD;;AAKAc,UACGC,OADH,CACW,uBADX,EAEGE,WAFH,CAGI,oFAHJ,EAKGG,qBALH,CAKyBpB,eAAe,SAAf,CALzB,EAKoD,IALpD;AAMD,C","file":"../../commands/url.js","sourcesContent":["import chalk from 'chalk';\nimport fp from 'lodash/fp';\n\nimport { Project, UrlUtils } from 'xdl';\n\nimport CommandError from '../CommandError';\nimport log from '../log';\nimport urlOpts from '../urlOpts';\nimport printRunInstructionsAsync from '../printRunInstructionsAsync';\n\nconst logArtifactUrl = platform => async (projectDir, options) => {\n  const res = await Project.buildAsync(projectDir, { current: false, mode: 'status' });\n  const url = fp.compose(\n    fp.get(['artifacts', 'url']),\n    fp.head,\n    fp.filter(job => platform && job.platform === platform),\n    fp.getOr([], 'jobs')\n  )(res);\n  if (url) {\n    log.nested(url);\n  } else {\n    throw new Error(`No ${platform} binary file found. Use \"exp build:${platform}\" to create one.`);\n  }\n};\n\nasync function action(projectDir, options) {\n  await urlOpts.optsAsync(projectDir, options);\n\n  if ((await Project.currentStatus(projectDir)) !== 'running') {\n    throw new CommandError(\n      'NOT_RUNNING',\n      `Project is not running. Please start it with \\`${options.parent.name} start\\`.`\n    );\n  }\n  const url = await UrlUtils.constructManifestUrlAsync(projectDir);\n\n  urlOpts.printQRCode(url);\n\n  log('Your URL is\\n\\n' + chalk.underline(url) + '\\n');\n  log.raw(url);\n\n  await printRunInstructionsAsync();\n  await urlOpts.handleMobileOptsAsync(projectDir, options);\n}\n\nexport default program => {\n  program\n    .command('url [project-dir]')\n    .alias('u')\n    .description('Displays the URL you can use to view your project in Expo')\n    .urlOpts()\n    .allowOffline()\n    .asyncActionProjectDir(action, /* skipProjectValidation: */ true, /* skipAuthCheck: */ true);\n\n  program\n    .command('url:ipa [project-dir]')\n    .description('Displays the standalone iOS binary URL you can use to download your app binary')\n    .asyncActionProjectDir(logArtifactUrl('ios'), true);\n\n  program\n    .command('url:apk [project-dir]')\n    .description(\n      'Displays the standalone Android binary URL you can use to download your app binary'\n    )\n    .asyncActionProjectDir(logArtifactUrl('android'), true);\n};\n"],"sourceRoot":"/exp@55.0.5/src"}