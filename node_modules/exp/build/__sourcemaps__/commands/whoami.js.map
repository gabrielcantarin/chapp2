{"version":3,"sources":["commands/whoami.js"],"names":["options","ensureLoggedInAsync","user","username","green","raw","Error","action","program","command","alias","description","asyncAction"],"mappings":";;;;;;;;;;;;;;;;;;;4IASA,iBAAsBA,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACqB,2BAAKC,mBAAL,EADrB;;AAAA;AACQC,gBADR;;AAAA,kBAEMA,QAAQA,KAAKC,QAFnB;AAAA;AAAA;AAAA;;AAGI,iEAAoB,kCAAMC,KAAN,CAAYF,KAAKC,QAAjB,CAApB;AACA,0CAAIE,GAAJ,CAAQH,KAAKC,QAAb;AAJJ,6CAKWD,IALX;;AAAA;AAAA,kBAOU,IAAII,KAAJ,CAAU,iDAAV,CAPV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,M;;;;;;;AALf;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;kBAae,mBAAW;AACxBC,UACGC,OADH,CACW,QADX,EAEGC,KAFH,CAES,GAFT,EAGGC,WAHH,CAGe,+DAHf,EAIGC,WAJH,CAIeL,MAJf;AAKD,C","file":"../../commands/whoami.js","sourcesContent":["/**\n * @flow\n */\n\nimport { User } from 'xdl';\n\nimport log from '../log';\nimport chalk from 'chalk';\n\nasync function action(options) {\n  const user = await User.ensureLoggedInAsync();\n  if (user && user.username) {\n    log(`Logged in as ${chalk.green(user.username)}`);\n    log.raw(user.username);\n    return user;\n  } else {\n    throw new Error(\"Unexpected Error: Couldn't get user information\");\n  }\n}\n\nexport default program => {\n  program\n    .command('whoami')\n    .alias('w')\n    .description('Checks with the server and then says who you are logged in as')\n    .asyncAction(action);\n};\n"],"sourceRoot":"/exp@55.0.5/src"}