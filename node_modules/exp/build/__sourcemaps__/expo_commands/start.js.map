{"version":3,"sources":["expo_commands/start.js"],"names":["projectDir","options","currentStatus","projectState","error","process","exit","warn","optsAsync","gray","root","resolve","startOpts","clear","reset","maxWorkers","startAsync","devToolsUrl","constructManifestUrlAsync","url","getRecipient","sendTo","recipient","sendUrlAsync","handleMobileOptsAsync","readConfigJsonAsync","exp","underline","nonInteractive","isDetached","getAsync","bold","newLine","printQRCode","nested","green","action","program","command","alias","description","option","urlOpts","allowOffline","asyncActionProjectDir"],"mappings":"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","file":"../../expo_commands/start.js","sourcesContent":["/**\n * @flow\n */\n\nimport { DevToolsServer } from '@expo/dev-tools';\nimport { ProjectUtils, ProjectSettings, Project, UserSettings, UrlUtils } from 'xdl';\nimport chalk from 'chalk';\nimport opn from 'opn';\nimport path from 'path';\n\nimport prompt from '../prompt';\nimport log from '../log';\nimport sendTo from '../sendTo';\nimport { installExitHooks } from '../exit';\nimport urlOpts from '../urlOpts';\nimport * as TerminalUI from './start/TerminalUI';\n\nasync function action(projectDir, options) {\n  const projectState = await Project.currentStatus(projectDir);\n\n  if (projectState === 'running') {\n    log.error('exp is already running for this project. Exiting...');\n    process.exit(1);\n  } else if (projectState === 'ill') {\n    log.warn(\n      'exp may have exited improperly. Proceeding, but you should check for orphaned processes.'\n    );\n  }\n\n  installExitHooks(projectDir);\n\n  await urlOpts.optsAsync(projectDir, options);\n\n  log(chalk.gray('Starting project at', projectDir));\n\n  let root = path.resolve(projectDir);\n  let startOpts = {};\n  if (options.clear) {\n    startOpts.reset = true;\n  }\n\n  if (options.maxWorkers) {\n    startOpts.maxWorkers = options.maxWorkers;\n  }\n\n  let devToolsUrl = await DevToolsServer.startAsync(root);\n  await Project.startAsync(root, startOpts);\n\n  const url = await UrlUtils.constructManifestUrlAsync(projectDir);\n\n  const recipient = await sendTo.getRecipient(options.sendTo);\n  if (recipient) {\n    await sendTo.sendUrlAsync(url, recipient);\n  }\n\n  await urlOpts.handleMobileOptsAsync(projectDir, options);\n\n  const { exp } = await ProjectUtils.readConfigJsonAsync(projectDir);\n\n  log(`Expo DevTools is running at ${chalk.underline(devToolsUrl)}`);\n  if (!options.nonInteractive && !exp.isDetached) {\n    if (await UserSettings.getAsync('openDevToolsAtStartup', true)) {\n      log(`Opening DevTools in the browser... (press ${chalk.bold`shift-d`} to disable)`);\n      opn(devToolsUrl);\n    } else {\n      log(\n        `Press ${chalk.bold`d`} to open DevTools now, or ${chalk.bold`shift-d`} to always open it automatically.`\n      );\n    }\n    await TerminalUI.startAsync(projectDir);\n  } else {\n    if (!exp.isDetached) {\n      log.newLine();\n      urlOpts.printQRCode(url);\n    }\n    log(`Your app is running at ${chalk.underline(url)}`);\n  }\n\n  log.nested(chalk.green('Logs for your project will appear below. Press Ctrl+C to exit.'));\n}\n\nexport default (program: any) => {\n  program\n    .command('start [project-dir]')\n    .alias('r')\n    .description('Starts or restarts a local server for your app and gives you a URL to it')\n    .option('-s, --send-to [dest]', 'A phone number or e-mail address to send a link to')\n    .option('-c, --clear', 'Clear the React Native packager cache')\n    // TODO(anp) set a default for this dynamically based on whether we're inside a container?\n    .option('--max-workers [num]', 'Maximum number of tasks to allow Metro to spawn.')\n    .urlOpts()\n    .allowOffline()\n    .asyncActionProjectDir(action, true);\n};\n"],"sourceRoot":"/exp@55.0.5/src"}