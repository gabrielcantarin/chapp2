'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

var _getPrototypeOf;

function _load_getPrototypeOf() {
  return _getPrototypeOf = _interopRequireDefault(require('babel-runtime/core-js/object/get-prototype-of'));
}

var _classCallCheck2;

function _load_classCallCheck() {
  return _classCallCheck2 = _interopRequireDefault(require('babel-runtime/helpers/classCallCheck'));
}

var _createClass2;

function _load_createClass() {
  return _createClass2 = _interopRequireDefault(require('babel-runtime/helpers/createClass'));
}

var _possibleConstructorReturn2;

function _load_possibleConstructorReturn() {
  return _possibleConstructorReturn2 = _interopRequireDefault(require('babel-runtime/helpers/possibleConstructorReturn'));
}

var _inherits2;

function _load_inherits() {
  return _inherits2 = _interopRequireDefault(require('babel-runtime/helpers/inherits'));
}

var _fsExtra;

function _load_fsExtra() {
  return _fsExtra = _interopRequireDefault(require('fs-extra'));
}

var _path = _interopRequireDefault(require('path'));

var _untildify;

function _load_untildify() {
  return _untildify = _interopRequireDefault(require('untildify'));
}

var _xdl;

function _load_xdl() {
  return _xdl = require('xdl');
}

var _chalk;

function _load_chalk() {
  return _chalk = _interopRequireDefault(require('chalk'));
}

var _log;

function _load_log() {
  return _log = _interopRequireDefault(require('../../log'));
}

var _BaseBuilder2;

function _load_BaseBuilder() {
  return _BaseBuilder2 = _interopRequireDefault(require('./BaseBuilder'));
}

var _prompt;

function _load_prompt() {
  return _prompt = _interopRequireDefault(require('../../prompt'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var AndroidBuilder = function (_BaseBuilder) {
  (0, (_inherits2 || _load_inherits()).default)(AndroidBuilder, _BaseBuilder);

  function AndroidBuilder() {
    (0, (_classCallCheck2 || _load_classCallCheck()).default)(this, AndroidBuilder);
    return (0, (_possibleConstructorReturn2 || _load_possibleConstructorReturn()).default)(this, (AndroidBuilder.__proto__ || (0, (_getPrototypeOf || _load_getPrototypeOf()).default)(AndroidBuilder)).apply(this, arguments));
  }

  (0, (_createClass2 || _load_createClass()).default)(AndroidBuilder, [{
    key: 'run',
    value: function () {
      var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee() {
        var publishedExpIds;
        return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.checkStatus('android');

              case 2:
                _context.next = 4;
                return this.validateProject();

              case 4:
                _context.next = 6;
                return this.collectAndValidateCredentials();

              case 6:
                _context.next = 8;
                return this.ensureReleaseExists('android');

              case 8:
                publishedExpIds = _context.sent;
                _context.next = 11;
                return this.build(publishedExpIds, 'android');

              case 11:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function run() {
        return _ref.apply(this, arguments);
      }

      return run;
    }()
  }, {
    key: '_clearCredentials',
    value: function () {
      var _ref2 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee2() {
        var _ref3, _ref3$args, username, remotePackageName, experienceName, credentialMetadata, questions, answers, backupKeystoreOutputPath;

        return (_regenerator || _load_regenerator()).default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (_xdl || _load_xdl()).Exp.getPublishInfoAsync(this.projectDir);

              case 2:
                _ref3 = _context2.sent;
                _ref3$args = _ref3.args;
                username = _ref3$args.username;
                remotePackageName = _ref3$args.remotePackageName;
                experienceName = _ref3$args.remoteFullPackageName;
                credentialMetadata = {
                  username: username,
                  experienceName: experienceName,
                  platform: 'android'
                };


                (_log || _load_log()).default.warn('Clearing your Android build credentials from our build servers is a ' + (_chalk || _load_chalk()).default.red('PERMANENT and IRREVERSIBLE action.'));
                (_log || _load_log()).default.warn('Android keystores must be identical to the one previously used to submit your app to the Google Play Store.');
                (_log || _load_log()).default.warn('Please read https://docs.expo.io/versions/latest/guides/building-standalone-apps.html#if-you-choose-to-build-for-android for more info before proceeding.');
                (_log || _load_log()).default.warn("We'll store a backup of your Android keystore in this directory in case you decide to delete it from our servers.");
                questions = [{
                  type: 'confirm',
                  name: 'confirm',
                  message: 'Permanently delete the Android build credentials from our servers?'
                }];
                _context2.next = 15;
                return (0, (_prompt || _load_prompt()).default)(questions);

              case 15:
                answers = _context2.sent;

                if (!answers.confirm) {
                  _context2.next = 24;
                  break;
                }

                (0, (_log || _load_log()).default)('Backing up your Android keystore now...');
                backupKeystoreOutputPath = _path.default.resolve(this.projectDir, remotePackageName + '.jks.bak');
                _context2.next = 21;
                return (_xdl || _load_xdl()).Credentials.backupExistingAndroidCredentials({
                  outputPath: backupKeystoreOutputPath,
                  username: username,
                  experienceName: experienceName,
                  log: (_log || _load_log()).default
                });

              case 21:
                _context2.next = 23;
                return (_xdl || _load_xdl()).Credentials.removeCredentialsForPlatform('android', credentialMetadata);

              case 23:
                (_log || _load_log()).default.warn('Removed existing credentials from Expo servers');

              case 24:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _clearCredentials() {
        return _ref2.apply(this, arguments);
      }

      return _clearCredentials;
    }()
  }, {
    key: 'collectAndValidateCredentials',
    value: function () {
      var _ref4 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee4() {
        var _this2 = this;

        var _ref5, _ref5$args, username, experienceName, credentialMetadata, credentialsExist, questions, answers, keystorePath, keystoreAlias, keystorePassword, keyPassword, keystoreData, credentials;

        return (_regenerator || _load_regenerator()).default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (_xdl || _load_xdl()).Exp.getPublishInfoAsync(this.projectDir);

              case 2:
                _ref5 = _context4.sent;
                _ref5$args = _ref5.args;
                username = _ref5$args.username;
                experienceName = _ref5$args.remoteFullPackageName;
                credentialMetadata = {
                  username: username,
                  experienceName: experienceName,
                  platform: 'android'
                };
                _context4.next = 9;
                return (_xdl || _load_xdl()).Credentials.credentialsExistForPlatformAsync(credentialMetadata);

              case 9:
                credentialsExist = _context4.sent;

                if (!this.checkEnv()) {
                  _context4.next = 15;
                  break;
                }

                _context4.next = 13;
                return this.collectAndValidateCredentialsFromCI(credentialMetadata);

              case 13:
                _context4.next = 34;
                break;

              case 15:
                if (!(this.options.clearCredentials || !credentialsExist)) {
                  _context4.next = 34;
                  break;
                }

                console.log('');
                questions = [{
                  type: 'rawlist',
                  name: 'uploadKeystore',
                  message: 'Would you like to upload a keystore or have us generate one for you?\nIf you don\'t know what this means, let us handle it! :)\n',
                  choices: [{ name: 'Let Expo handle the process!', value: false }, { name: 'I want to upload my own keystore!', value: true }]
                }, {
                  type: 'input',
                  name: 'keystorePath',
                  message: 'Path to keystore:',
                  validate: function () {
                    var _ref6 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee3(keystorePath) {
                      var keystorePathStats;
                      return (_regenerator || _load_regenerator()).default.wrap(function _callee3$(_context3) {
                        while (1) {
                          switch (_context3.prev = _context3.next) {
                            case 0:
                              _context3.prev = 0;
                              _context3.next = 3;
                              return (_fsExtra || _load_fsExtra()).default.stat(keystorePath);

                            case 3:
                              keystorePathStats = _context3.sent;
                              return _context3.abrupt('return', keystorePathStats.isFile());

                            case 7:
                              _context3.prev = 7;
                              _context3.t0 = _context3['catch'](0);

                              // file does not exist
                              console.log('\nFile does not exist.');
                              return _context3.abrupt('return', false);

                            case 11:
                            case 'end':
                              return _context3.stop();
                          }
                        }
                      }, _callee3, _this2, [[0, 7]]);
                    }));

                    return function validate(_x) {
                      return _ref6.apply(this, arguments);
                    };
                  }(),
                  filter: function filter(keystorePath) {
                    keystorePath = (0, (_untildify || _load_untildify()).default)(keystorePath);
                    if (!_path.default.isAbsolute(keystorePath)) {
                      keystorePath = _path.default.resolve(keystorePath);
                    }
                    return keystorePath;
                  },
                  when: function when(answers) {
                    return answers.uploadKeystore;
                  }
                }, {
                  type: 'input',
                  name: 'keystoreAlias',
                  message: 'Keystore Alias:',
                  validate: function validate(val) {
                    return val !== '';
                  },
                  when: function when(answers) {
                    return answers.uploadKeystore;
                  }
                }, {
                  type: 'password',
                  name: 'keystorePassword',
                  message: 'Keystore Password:',
                  validate: function validate(val) {
                    return val !== '';
                  },
                  when: function when(answers) {
                    return answers.uploadKeystore;
                  }
                }, {
                  type: 'password',
                  name: 'keyPassword',
                  message: 'Key Password:',
                  validate: function validate(password, answers) {
                    if (password === '') {
                      return false;
                    }
                    // Todo validate keystore passwords
                    return true;
                  },
                  when: function when(answers) {
                    return answers.uploadKeystore;
                  }
                }];
                _context4.next = 20;
                return (0, (_prompt || _load_prompt()).default)(questions);

              case 20:
                answers = _context4.sent;

                if (answers.uploadKeystore) {
                  _context4.next = 27;
                  break;
                }

                if (!(this.options.clearCredentials && credentialsExist)) {
                  _context4.next = 25;
                  break;
                }

                _context4.next = 25;
                return this._clearCredentials();

              case 25:
                _context4.next = 34;
                break;

              case 27:
                keystorePath = answers.keystorePath, keystoreAlias = answers.keystoreAlias, keystorePassword = answers.keystorePassword, keyPassword = answers.keyPassword;

                // read the keystore

                _context4.next = 30;
                return (_fsExtra || _load_fsExtra()).default.readFile(keystorePath);

              case 30:
                keystoreData = _context4.sent;
                credentials = {
                  keystore: keystoreData.toString('base64'),
                  keystoreAlias: keystoreAlias,
                  keystorePassword: keystorePassword,
                  keyPassword: keyPassword
                };
                _context4.next = 34;
                return (_xdl || _load_xdl()).Credentials.updateCredentialsForPlatform('android', credentials, credentialMetadata);

              case 34:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function collectAndValidateCredentials() {
        return _ref4.apply(this, arguments);
      }

      return collectAndValidateCredentials;
    }()
  }, {
    key: 'checkEnv',
    value: function checkEnv() {
      return this.options.keystorePath && this.options.keystoreAlias && process.env.EXPO_ANDROID_KEYSTORE_PASSWORD && process.env.EXPO_ANDROID_KEY_PASSWORD;
    }
  }, {
    key: 'collectAndValidateCredentialsFromCI',
    value: function () {
      var _ref7 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee5(credentialMetadata) {
        var credentials;
        return (_regenerator || _load_regenerator()).default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return (_fsExtra || _load_fsExtra()).default.readFile(this.options.keystorePath);

              case 2:
                _context5.t0 = _context5.sent.toString('base64');
                _context5.t1 = this.options.keystoreAlias;
                _context5.t2 = process.env.EXPO_ANDROID_KEYSTORE_PASSWORD;
                _context5.t3 = process.env.EXPO_ANDROID_KEY_PASSWORD;
                credentials = {
                  keystore: _context5.t0,
                  keystoreAlias: _context5.t1,
                  keystorePassword: _context5.t2,
                  keyPassword: _context5.t3
                };
                _context5.next = 9;
                return (_xdl || _load_xdl()).Credentials.updateCredentialsForPlatform('android', credentials, credentialMetadata);

              case 9:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function collectAndValidateCredentialsFromCI(_x2) {
        return _ref7.apply(this, arguments);
      }

      return collectAndValidateCredentialsFromCI;
    }()
  }, {
    key: 'validateProject',
    value: function () {
      var _ref8 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee6() {
        var _ref9, sdkVersion;

        return (_regenerator || _load_regenerator()).default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return (_xdl || _load_xdl()).Exp.getPublishInfoAsync(this.projectDir);

              case 2:
                _ref9 = _context6.sent;
                sdkVersion = _ref9.args.sdkVersion;
                _context6.next = 6;
                return this.checkIfSdkIsSupported(sdkVersion, 'android');

              case 6:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function validateProject() {
        return _ref8.apply(this, arguments);
      }

      return validateProject;
    }()
  }]);
  return AndroidBuilder;
}((_BaseBuilder2 || _load_BaseBuilder()).default);

exports.default = AndroidBuilder;
module.exports = exports['default'];
//# sourceMappingURL=../../__sourcemaps__/commands/build/AndroidBuilder.js.map
