{"version":3,"sources":["Exp.js"],"names":["async","root","let","exp","pkg","await","ProjectUtils","readConfigJsonAsync","entryPoint","main","determineEntryPointAsync","templateId","progressFunction","retryFunction","versions","Api","versionsAsync","templateApp","templatesv2","find","template","id","ErrorCode","INVALID_OPTIONS","starterAppPath","path","join","_starterAppCacheDirectory","version","fs","exists","Logger","notifications","info","code","NotificationCode","PROGRESS","MessageCode","DOWNLOADING","downloadAsync","url","_downloadStarterAppAsync","selectedDir","opts","name","Analytics","logEvent","stats","statSync","e","isDirectory","readdirSync","length","DIRECTORY_ALREADY_EXISTS","downloadTemplateApp","EXTRACTING","mkdirpAsync","Extract","extractAsync","CUSTOMIZING","appJson","readFile","customAppJson","replace","writeFile","initGitRepo","extractTemplateApp","process","platform","Binaries","isXcodeInstalled","global","warn","insideGit","spawnAsync","cwd","debug","resolve","recentExpsJsonFile","UserSettings","recentExps","readAsync","filter","x","unshift","writeAsync","slice","saveRecentExpRootAsync","description","icon","iconUrl","pathOrUrl","resolvedPath","existsSync","readableRoot","makePathReadable","expInfoSafeAsync","user","UserManager","ensureLoggedInAsync","Error","username","slug","sdkVersion","configName","configFilenameAsync","remotePackageName","remoteUsername","remoteFullPackageName","bundleIdentifierIOS","ios","bundleIdentifier","args","getPublishInfoAsync","results","Promise","all","map","filteredResults","result","recentValidExpsAsync","recipient","url_","allowUnauthed","callMethodAsync","sendAsync","projectRoot","ps","ProjectSettings","randomness","urlRandomness","resetProjectRandomnessAsync","getProjectRandomnessAsync","UrlUtils","someRandomness","setAsync","dotExpoHomeDirectory","rimraf","sync","clearXDLCacheAsync","default","ENTRY_POINT_PLATFORM_TEMPLATE_STRING","promisify","dir","mkdirp","getHomeDir","env","pth","homedir","substr"],"mappings":"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","file":"../Exp.js","sourcesContent":["/**\n * @flow\n */\n\nimport promisify from 'util.promisify';\nimport fs from 'fs-extra';\nimport mkdirp from 'mkdirp';\nimport path from 'path';\nimport spawnAsync from '@expo/spawn-async';\nimport JsonFile from '@expo/json-file';\nimport rimraf from 'rimraf';\n\nimport * as Analytics from './Analytics';\nimport Api from './Api';\nimport * as Binaries from './Binaries';\nimport ErrorCode from './ErrorCode';\nimport * as Extract from './Extract';\nimport Logger from './Logger';\nimport NotificationCode from './NotificationCode';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport UserManager from './User';\nimport * as UrlUtils from './UrlUtils';\nimport UserSettings from './UserSettings';\nimport XDLError from './XDLError';\nimport * as ProjectSettings from './ProjectSettings';\nimport MessageCode from './MessageCode';\n\n// FIXME(perry) eliminate usage of this template\nexport const ENTRY_POINT_PLATFORM_TEMPLATE_STRING = 'PLATFORM_GOES_HERE';\n\nexport { default as convertProjectAsync } from './project/Convert';\n\nconst mkdirpAsync = promisify(mkdirp);\n\nexport async function determineEntryPointAsync(root: string) {\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(root);\n\n  // entryPoint is relative to the packager root and main is relative\n  // to the project root. So if your rn-cli.config.js points to a different\n  // root than the project root, these can be different. Most of the time\n  // you should use main.\n  let entryPoint = pkg.main || 'index.js';\n  if (exp && exp.entryPoint) {\n    entryPoint = exp.entryPoint;\n  }\n\n  return entryPoint;\n}\n\nfunction _starterAppCacheDirectory() {\n  let dotExpoHomeDirectory = UserSettings.dotExpoHomeDirectory();\n  let dir = path.join(dotExpoHomeDirectory, 'starter-app-cache');\n  mkdirp.sync(dir);\n  return dir;\n}\n\nasync function _downloadStarterAppAsync(templateId, progressFunction, retryFunction) {\n  let versions = await Api.versionsAsync();\n  let templateApp = versions.templatesv2.find(template => template.id === templateId);\n  if (!templateApp) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, `No template app with id ${templateId}.`);\n  }\n\n  let starterAppPath = path.join(\n    _starterAppCacheDirectory(),\n    `${templateId}-${templateApp.version}.tar.gz`\n  );\n\n  if (await fs.exists(starterAppPath)) {\n    return starterAppPath;\n  }\n\n  Logger.notifications.info({ code: NotificationCode.PROGRESS }, MessageCode.DOWNLOADING);\n  await Api.downloadAsync(templateApp.url, starterAppPath, {}, progressFunction, retryFunction);\n  return starterAppPath;\n}\n\nexport async function downloadTemplateApp(templateId: string, selectedDir: string, opts: any) {\n  let name = opts.name;\n  let root = path.join(selectedDir, name);\n\n  Analytics.logEvent('New Project', {\n    selectedDir,\n    name,\n  });\n\n  let stats;\n  try {\n    // If file doesn't exist it will throw an error.\n    // Don't want to continue unless there is nothing there.\n    stats = fs.statSync(root);\n  } catch (e) {\n    stats = null;\n  }\n  // This check is required because without it, the retry button would throw an error because the directory already exists,\n  // even though it is empty.\n  if (stats && !(stats.isDirectory() && fs.readdirSync(root).length === 0)) {\n    throw new XDLError(\n      ErrorCode.DIRECTORY_ALREADY_EXISTS,\n      `The path \"${root}\" already exists.\\nPlease choose a different parent directory or project name.`\n    );\n  }\n\n  // Download files\n  let starterAppPath = await _downloadStarterAppAsync(\n    templateId,\n    opts.progressFunction,\n    opts.retryFunction\n  );\n  return { starterAppPath, name, root };\n}\n\nexport async function extractTemplateApp(starterAppPath: string, name: string, root: string) {\n  Logger.notifications.info({ code: NotificationCode.PROGRESS }, MessageCode.EXTRACTING);\n  await mkdirpAsync(root);\n  await Extract.extractAsync(starterAppPath, root);\n\n  // Update files\n  Logger.notifications.info({ code: NotificationCode.PROGRESS }, MessageCode.CUSTOMIZING);\n\n  // Update app.json\n  let appJson = await fs.readFile(path.join(root, 'app.json'), 'utf8');\n  let customAppJson = appJson\n    .replace(/\\\"My New Project\\\"/, `\"${name}\"`)\n    .replace(/\\\"my-new-project\\\"/, `\"${name}\"`);\n  await fs.writeFile(path.join(root, 'app.json'), customAppJson, 'utf8');\n\n  await initGitRepo(root);\n\n  return root;\n}\n\nasync function initGitRepo(root: string) {\n  if (process.platform === 'darwin' && !Binaries.isXcodeInstalled()) {\n    Logger.global.warn(`Unable to initialize git repo. \\`git\\` not installed.`);\n    return;\n  }\n\n  // let's see if we're in a git tree\n  let insideGit = true;\n  try {\n    await spawnAsync('git', ['rev-parse', '--is-inside-work-tree'], {\n      cwd: root,\n    });\n    Logger.global.debug('New project is already inside of a git repo, skipping git init.');\n  } catch (e) {\n    insideGit = false;\n  }\n\n  if (!insideGit) {\n    try {\n      await spawnAsync('git', ['init'], { cwd: root });\n    } catch (e) {\n      // no-op -- this is just a convenience and we don't care if it fails\n    }\n  }\n}\n\nexport async function saveRecentExpRootAsync(root: string) {\n  root = path.resolve(root);\n\n  // Write the recent Exps JSON file\n  let recentExpsJsonFile = UserSettings.recentExpsJsonFile();\n  let recentExps = await recentExpsJsonFile.readAsync();\n  // Filter out copies of this so we don't get dupes in this list\n  recentExps = recentExps.filter(function(x) {\n    return x !== root;\n  });\n  recentExps.unshift(root);\n  return await recentExpsJsonFile.writeAsync(recentExps.slice(0, 100));\n}\n\nfunction getHomeDir(): string {\n  return process.env[process.platform === 'win32' ? 'USERPROFILE' : 'HOME'] || '';\n}\n\nfunction makePathReadable(pth) {\n  let homedir = getHomeDir();\n  if (pth.substr(0, homedir.length) === homedir) {\n    return `~${pth.substr(homedir.length)}`;\n  } else {\n    return pth;\n  }\n}\n\nexport async function expInfoSafeAsync(root: string) {\n  try {\n    let { exp: { name, description, icon, iconUrl } } = await ProjectUtils.readConfigJsonAsync(\n      root\n    );\n    let pathOrUrl =\n      icon || iconUrl || 'https://d3lwq5rlu14cro.cloudfront.net/ExponentEmptyManifest_192.png';\n    let resolvedPath = path.resolve(root, pathOrUrl);\n    if (fs.existsSync(resolvedPath)) {\n      icon = `file://${resolvedPath}`;\n    } else {\n      icon = pathOrUrl; // Assume already a URL\n    }\n\n    return {\n      readableRoot: makePathReadable(root),\n      root,\n      name,\n      description,\n      icon,\n    };\n  } catch (e) {\n    return null;\n  }\n}\n\ntype PublishInfo = {\n  args: {\n    username: string,\n    remoteUsername: string,\n    remotePackageName: string,\n    remoteFullPackageName: string,\n    bundleIdentifierIOS: ?string,\n  },\n};\n\n// TODO: remove / change, no longer publishInfo, this is just used for signing\nexport async function getPublishInfoAsync(root: string): Promise<PublishInfo> {\n  const user = await UserManager.ensureLoggedInAsync();\n\n  if (!user) {\n    throw new Error('Attempted to login in offline mode. This is a bug.');\n  }\n\n  const { username } = user;\n\n  const { exp } = await ProjectUtils.readConfigJsonAsync(root);\n\n  const name = exp.slug;\n  const { version, sdkVersion } = exp;\n\n  const configName = await ProjectUtils.configFilenameAsync(root);\n\n  if (!sdkVersion) {\n    throw new Error(`sdkVersion is missing from ${configName}`);\n  }\n\n  if (!name) {\n    // slug is made programmatically for app.json\n    throw new Error(`slug field is missing from exp.json.`);\n  }\n\n  if (!version) {\n    throw new Error(`Can't get version of package.`);\n  }\n\n  const remotePackageName = name;\n  const remoteUsername = username;\n  const remoteFullPackageName = `@${remoteUsername}/${remotePackageName}`;\n  const bundleIdentifierIOS = exp.ios ? exp.ios.bundleIdentifier : null;\n\n  return {\n    args: {\n      username,\n      remoteUsername,\n      remotePackageName,\n      remoteFullPackageName,\n      bundleIdentifierIOS,\n      sdkVersion,\n    },\n  };\n}\n\nexport async function recentValidExpsAsync() {\n  let recentExpsJsonFile = UserSettings.recentExpsJsonFile();\n  let recentExps = await recentExpsJsonFile.readAsync();\n\n  let results = await Promise.all(recentExps.map(expInfoSafeAsync));\n  let filteredResults = results.filter(result => result);\n  return filteredResults;\n}\n\nexport async function sendAsync(recipient: string, url_: string, allowUnauthed: boolean = false) {\n  let result = await Api.callMethodAsync('send', [recipient, url_, allowUnauthed]);\n  return result;\n}\n\n// TODO: figure out where these functions should live\nexport async function getProjectRandomnessAsync(projectRoot: string) {\n  let ps = await ProjectSettings.readAsync(projectRoot);\n  let randomness = ps.urlRandomness;\n  if (randomness) {\n    return randomness;\n  } else {\n    return resetProjectRandomnessAsync(projectRoot);\n  }\n}\n\nexport async function resetProjectRandomnessAsync(projectRoot: string) {\n  let randomness = UrlUtils.someRandomness();\n  ProjectSettings.setAsync(projectRoot, { urlRandomness: randomness });\n  return randomness;\n}\n\nexport async function clearXDLCacheAsync() {\n  let dotExpoHomeDirectory = UserSettings.dotExpoHomeDirectory();\n  rimraf.sync(path.join(dotExpoHomeDirectory, 'ios-simulator-app-cache'));\n  rimraf.sync(path.join(dotExpoHomeDirectory, 'android-apk-cache'));\n  rimraf.sync(path.join(dotExpoHomeDirectory, 'starter-app-cache'));\n  Logger.notifications.info(`Cleared cache`);\n}\n"],"sourceRoot":"/xdl@50.4.2/src"}