{"version":3,"sources":["UrlUtils.js"],"names":["async","projectRoot","opts","requestHostname","constructUrlAsync","constructBundleUrlAsync","constructManifestUrlAsync","let","urlString","await","urlObj","url","parse","protocol","slashes","format","constructHostUriAsync","baseUrl","urlType","constructLogUrlAsync","entryPoint","ext","bundleUrl","hostType","mainModulePath","guessMainModulePath","queryParams","constructBundleQueryParamsAsync","dev","minify","constructUrlWithExtensionAsync","constructPublishUrlAsync","constructSourceMapUrlAsync","constructAssetsUrlAsync","constructDebuggerHostAsync","encodeURIComponent","hasOwnProperty","strict","exp","pkg","ProjectUtils","readConfigJsonAsync","sdkPkg","dependencies","nodeModulesPath","path","join","resolve","pluginModule","supportsAssetPlugins","Versions","gteSdkVersion","isPackager","urlRandomnessSchema","Config","offline","joi","string","optional","allow","schema","object","keys","any","valid","lanType","boolean","urlRandomness","joiValidateAsync","e","ErrorCode","INVALID_OPTIONS","toString","defaultOpts","ProjectSettings","getPackagerOptsAsync","Object","assign","packagerInfo","readPackagerInfoAsync","detach","scheme","hostname","port","proxyURL","process","env","EXPO_PACKAGER_PROXY_URL","EXPO_MANIFEST_PROXY_URL","parsedProxyURL","packagerPort","expoServerPort","EXPO_PACKAGER_HOSTNAME","trim","REACT_NATIVE_PACKAGER_HOSTNAME","ip","address","os","ngrokUrl","packagerNgrokUrl","expoServerNgrokUrl","pnu","url_","Error","randomIdentifier","sevenDigitIdentifier","randomIdentifierForUser","someRandomness","domainify","getPlatformSpecificBundleUrl","promisify","validate","replace","length","alphabet","result","i","j","Math","floor","random","c","substr","username","s","toLowerCase","platform","includes","Exp","ENTRY_POINT_PLATFORM_TEMPLATE_STRING"],"mappings":"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","file":"../UrlUtils.js","sourcesContent":["/**\n * @flow\n */\n\nimport joi from 'joi';\nimport os from 'os';\nimport path from 'path';\nimport url from 'url';\nimport promisify from 'util.promisify';\n\nimport ip from './ip';\nimport Config from './Config';\nimport ErrorCode from './ErrorCode';\nimport * as Exp from './Exp';\nimport * as ProjectSettings from './ProjectSettings';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport * as Versions from './Versions';\nimport XDLError from './XDLError';\n\nconst joiValidateAsync = promisify(joi.validate);\n\nexport async function constructBundleUrlAsync(\n  projectRoot: string,\n  opts: any,\n  requestHostname?: string\n) {\n  return constructUrlAsync(projectRoot, opts, true, requestHostname);\n}\n\nexport async function constructManifestUrlAsync(\n  projectRoot: string,\n  opts: any,\n  requestHostname?: string\n) {\n  return constructUrlAsync(projectRoot, opts, false, requestHostname);\n}\n\n// gets the base manifest URL and removes the scheme\nexport async function constructHostUriAsync(projectRoot: string, requestHostname?: string) {\n  let urlString = await constructUrlAsync(projectRoot, null, false, requestHostname);\n  // we need to use node's legacy urlObject api since the newer one doesn't like empty protocols\n  let urlObj = url.parse(urlString);\n  urlObj.protocol = '';\n  urlObj.slashes = false;\n  return url.format(urlObj);\n}\n\nexport async function constructLogUrlAsync(projectRoot: string, requestHostname?: string) {\n  let baseUrl = await constructUrlAsync(projectRoot, { urlType: 'http' }, false, requestHostname);\n  return `${baseUrl}/logs`;\n}\n\nexport async function constructUrlWithExtensionAsync(\n  projectRoot: string,\n  entryPoint: string,\n  ext: string,\n  requestHostname?: string\n) {\n  let bundleUrl = await constructBundleUrlAsync(\n    projectRoot,\n    {\n      hostType: 'localhost',\n      urlType: 'http',\n    },\n    requestHostname\n  );\n\n  let mainModulePath = guessMainModulePath(entryPoint);\n  bundleUrl += `/${mainModulePath}.${ext}`;\n\n  let queryParams = await constructBundleQueryParamsAsync(\n    projectRoot,\n    {\n      dev: false,\n      minify: true,\n    },\n    requestHostname\n  );\n  return `${bundleUrl}?${queryParams}`;\n}\n\nexport async function constructPublishUrlAsync(\n  projectRoot: string,\n  entryPoint: string,\n  requestHostname?: string\n) {\n  return await constructUrlWithExtensionAsync(projectRoot, entryPoint, 'bundle', requestHostname);\n}\n\nexport async function constructSourceMapUrlAsync(\n  projectRoot: string,\n  entryPoint: string,\n  requestHostname?: string\n) {\n  return await constructUrlWithExtensionAsync(projectRoot, entryPoint, 'map', requestHostname);\n}\n\nexport async function constructAssetsUrlAsync(\n  projectRoot: string,\n  entryPoint: string,\n  requestHostname?: string\n) {\n  return await constructUrlWithExtensionAsync(projectRoot, entryPoint, 'assets', requestHostname);\n}\n\nexport async function constructDebuggerHostAsync(projectRoot: string, requestHostname?: string) {\n  return constructUrlAsync(\n    projectRoot,\n    {\n      urlType: 'no-protocol',\n    },\n    true,\n    requestHostname\n  );\n}\n\nexport async function constructBundleQueryParamsAsync(projectRoot: string, opts: any) {\n  let queryParams = `dev=${encodeURIComponent(!!opts.dev)}`;\n\n  if (opts.hasOwnProperty('strict')) {\n    queryParams += `&strict=${encodeURIComponent(!!opts.strict)}`;\n  }\n\n  if (opts.hasOwnProperty('minify')) {\n    queryParams += `&minify=${encodeURIComponent(!!opts.minify)}`;\n  }\n\n  queryParams += '&hot=false';\n\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  // Be backwards compatible for users who haven't migrated from `exponent`\n  // to the `expo` sdk package.\n  let sdkPkg = pkg.dependencies['expo'] ? 'expo' : 'exponent';\n  // Use an absolute path here so that we can not worry about symlinks/relative requires\n  let nodeModulesPath = exp.nodeModulesPath\n    ? path.join(path.resolve(projectRoot, exp.nodeModulesPath), 'node_modules')\n    : path.join(projectRoot, 'node_modules');\n  let pluginModule = path.join(nodeModulesPath, sdkPkg, 'tools', 'hashAssetFiles');\n  queryParams += `&assetPlugin=${encodeURIComponent(pluginModule)}`;\n\n  // Only sdk-10.1.0+ supports the assetPlugin parameter. We use only the\n  // major version in the sdkVersion field, so check for 11.0.0 to be sure.\n  let supportsAssetPlugins = Versions.gteSdkVersion(exp, '11.0.0');\n  if (!supportsAssetPlugins) {\n    queryParams += '&includeAssetFileHashes=true';\n  }\n\n  return queryParams;\n}\n\nexport async function constructUrlAsync(\n  projectRoot: string,\n  opts: any,\n  isPackager: boolean,\n  requestHostname?: string\n) {\n  if (opts) {\n    // the randomness is only important if we're online and can build a tunnel\n    let urlRandomnessSchema;\n    if (Config.offline) {\n      urlRandomnessSchema = joi\n        .string()\n        .optional()\n        .allow(null);\n    } else {\n      urlRandomnessSchema = joi.string();\n    }\n\n    let schema = joi.object().keys({\n      urlType: joi.any().valid('exp', 'http', 'redirect', 'no-protocol'),\n      lanType: joi.any().valid('ip', 'hostname'),\n      hostType: joi.any().valid('localhost', 'lan', 'tunnel'),\n      dev: joi.boolean(),\n      strict: joi.boolean(),\n      minify: joi.boolean(),\n      urlRandomness: urlRandomnessSchema,\n    });\n\n    try {\n      await joiValidateAsync(opts, schema);\n    } catch (e) {\n      throw new XDLError(ErrorCode.INVALID_OPTIONS, e.toString());\n    }\n  }\n\n  let defaultOpts = await ProjectSettings.getPackagerOptsAsync(projectRoot);\n  if (!opts) {\n    opts = defaultOpts;\n  } else {\n    opts = Object.assign({}, defaultOpts, opts);\n  }\n\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n\n  let protocol;\n  if (opts.urlType === 'http') {\n    protocol = 'http';\n  } else if (opts.urlType === 'no-protocol') {\n    protocol = null;\n  } else {\n    protocol = 'exp';\n\n    let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n    if (exp.detach) {\n      if (exp.scheme && Versions.gteSdkVersion(exp, '27.0.0')) {\n        protocol = exp.scheme;\n      } else if (exp.detach.scheme) {\n        // must keep this fallback in place for older projects\n        // and those detached with an older version of xdl\n        protocol = exp.detach.scheme;\n      }\n    }\n  }\n\n  let hostname;\n  let port;\n\n  const proxyURL = isPackager\n    ? process.env.EXPO_PACKAGER_PROXY_URL\n    : process.env.EXPO_MANIFEST_PROXY_URL;\n  if (proxyURL) {\n    const parsedProxyURL = url.parse(proxyURL);\n    hostname = parsedProxyURL.hostname;\n    port = parsedProxyURL.port;\n    if (parsedProxyURL.protocol === 'https:') {\n      if (protocol === 'http') {\n        protocol = 'https';\n      }\n      if (!port) {\n        port = '443';\n      }\n    }\n  } else if (opts.hostType === 'localhost' || requestHostname === 'localhost') {\n    hostname = 'localhost';\n    port = isPackager ? packagerInfo.packagerPort : packagerInfo.expoServerPort;\n  } else if (opts.hostType === 'lan' || Config.offline) {\n    if (process.env.EXPO_PACKAGER_HOSTNAME) {\n      hostname = process.env.EXPO_PACKAGER_HOSTNAME.trim();\n    } else if (process.env.REACT_NATIVE_PACKAGER_HOSTNAME) {\n      hostname = process.env.REACT_NATIVE_PACKAGER_HOSTNAME.trim();\n    } else if (opts.lanType === 'ip') {\n      if (requestHostname) {\n        hostname = requestHostname;\n      } else {\n        hostname = ip.address();\n      }\n    } else {\n      // Some old versions of OSX work with hostname but not local ip address.\n      hostname = os.hostname();\n    }\n    port = isPackager ? packagerInfo.packagerPort : packagerInfo.expoServerPort;\n  } else {\n    let ngrokUrl = isPackager ? packagerInfo.packagerNgrokUrl : packagerInfo.expoServerNgrokUrl;\n    if (!ngrokUrl) {\n      // use localhost\n      hostname = 'localhost';\n      port = isPackager ? packagerInfo.packagerPort : packagerInfo.expoServerPort;\n\n      // TODO report a warning when this is for a currently served project, suppress for status checks\n    } else {\n      let pnu = url.parse(ngrokUrl);\n      hostname = pnu.hostname;\n      port = pnu.port;\n    }\n  }\n\n  let url_ = '';\n  if (protocol) {\n    url_ += `${protocol}://`;\n  }\n\n  if (!hostname) {\n    throw new Error('Hostname cannot be inferred.');\n  }\n\n  url_ += hostname;\n\n  if (port) {\n    url_ += `:${port}`;\n  } else {\n    // Android HMR breaks without this :|\n    url_ += ':80';\n  }\n\n  if (opts.urlType === 'redirect') {\n    return `https://exp.host/--/to-exp/${encodeURIComponent(url_)}`;\n  }\n\n  return url_;\n}\n\nexport function guessMainModulePath(entryPoint: string) {\n  return entryPoint.replace(/\\.js$/, '');\n}\n\nexport function randomIdentifier(length: number = 6) {\n  let alphabet = '23456789qwertyuipasdfghjkzxcvbnm';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    let j = Math.floor(Math.random() * alphabet.length);\n    let c = alphabet.substr(j, 1);\n    result += c;\n  }\n  return result;\n}\n\nexport function sevenDigitIdentifier() {\n  return `${randomIdentifier(3)}-${randomIdentifier(4)}`;\n}\n\nexport function randomIdentifierForUser(username: string) {\n  return `${username}-${randomIdentifier(3)}-${randomIdentifier(2)}`;\n}\n\nexport function someRandomness() {\n  return [randomIdentifier(2), randomIdentifier(3)].join('-');\n}\n\nexport function domainify(s: string) {\n  return s\n    .toLowerCase()\n    .replace(/[^a-z0-9-]/g, '-')\n    .replace(/^-+/, '')\n    .replace(/-+$/, '');\n}\n\nexport function getPlatformSpecificBundleUrl(url: string, platform: string) {\n  if (url.includes(Exp.ENTRY_POINT_PLATFORM_TEMPLATE_STRING)) {\n    return url.replace(Exp.ENTRY_POINT_PLATFORM_TEMPLATE_STRING, platform);\n  } else {\n    return url;\n  }\n}\n"],"sourceRoot":"/xdl@50.4.2/src"}