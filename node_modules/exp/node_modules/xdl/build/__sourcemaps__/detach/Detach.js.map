{"version":3,"sources":["detach/Detach.js"],"names":["async","message","ok","await","inquirer","prompt","type","name","yesnoAsync","projectRoot","options","let","user","UserManager","ensureLoggedInAsync","Error","username","configName","configPath","configNamespace","ProjectUtils","findConfigFileAsync","exp","pkg","readConfigJsonAsync","experienceName","slug","experienceUrl","hasIosDirectory","isDirectory","path","join","hasAndroidDirectory","ErrorCode","DIRECTORY_ALREADY_EXISTS","process","platform","response","logger","info","sdkVersion","majorSdkVersion","parseSdkMajorVersion","versions","Versions","versionsAsync","sdkVersionConfig","sdkVersions","androidExpoViewUrl","iosExpoViewUrl","env","EXPO_VIEW_DIR","warn","isDetached","detach","detachedUUID","uuid","v4","replace","generatedScheme","scheme","gteSdkVersion","expoDirectory","mkdirp","sync","context","StandaloneContext","createUserContext","isIosSupported","force","ios","bundleIdentifier","iosBundleIdentifier","validate","value","test","detachIOSAsync","IosWorkspace","addDetachedConfigToExp","android","package","androidPackage","androidDirectory","rimraf","detachAndroidAsync","OldAndroidDetach","AndroidShellApp","config","fs","writeFile","JSON","stringify","reactNativeVersion","expoReactNativeTag","dependencies","nodeModulesPath","resolve","installPackageAsync","silent","e","detachAsync","createDetachedAsync","IosNSBundle","configureAsync","expoViewUrl","androidProjectDirectory","data","projectPath","tmpExpoDirectory","copyInitialShellAppFilesAsync","Api","downloadAsync","extract","runShellAppModificationsAsync","rimrafDontThrow","configFilePath","doesBuildConstantsExist","existsSync","IosPlist","createBlankAsync","ensureBuildConstantsExistsIOSAsync","iosProjectDirectory","expoKitVersion","podfileLockPath","podfileLock","readFile","expoKitVersionRegex","match","exec","_getIosExpoKitVersionThrowErrorAsync","projectDir","args","prepareDetachedUserContextIosAsync","prepareDetachedServiceContextIosAsync","prepareDetachedBuildIosAsync","workspaceSourcePath","buildFlags","StandaloneBuildFlags","createIos","createServiceContext","supportingDirectory","getPaths","prodApiKeys","_readDefaultApiKeysAsync","expoSourcePath","modifyAsync","constantsConfig","contextType","STANDALONE_CONTEXT_TYPE","EXPO_RUNTIME_VERSION","API_SERVER_ENDPOINT","ENVIRONMENT","DEFAULT_API_KEYS","jsonFilePath","keys","allKeys","readAsync","validKeys","key","hasOwnProperty","includes","podsDirectory","rnPodDirectory","rnFilesToDelete","glob","i","length","unlink","skipXcodeConfig","devUrl","UrlUtils","constructManifestUrlAsync","defaultApiKeys","developmentUrl","buildConstantsFileName","expoBuildConstantsMatches","expoBuildConstants","regexFileAsync","prepareDetachedBuildAsync","publishManifestPath","bundledManifestPath","manifest","parse","ex","AssetBundle","bundleAsync","bundledAssets","dest","bundleAssetsAsync"],"mappings":"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","file":"../../detach/Detach.js","sourcesContent":["// Copyright 2015-present 650 Industries. All rights reserved.\n/**\n * @flow\n */\n\n'use strict';\n\n// Set EXPO_VIEW_DIR to universe/exponent to test locally\n\nimport mkdirp from 'mkdirp';\nimport fs from 'fs-extra';\nimport JsonFile from '@expo/json-file';\nimport path from 'path';\nimport process from 'process';\nimport rimraf from 'rimraf';\nimport glob from 'glob-promise';\nimport uuid from 'uuid';\nimport inquirer from 'inquirer';\n\nimport {\n  isDirectory,\n  parseSdkMajorVersion,\n  rimrafDontThrow,\n  regexFileAsync,\n} from './ExponentTools';\n\nimport * as AssetBundle from './AssetBundle';\nimport * as IosPlist from './IosPlist';\nimport * as IosNSBundle from './IosNSBundle';\nimport * as IosWorkspace from './IosWorkspace';\nimport * as AndroidShellApp from './AndroidShellApp';\nimport * as OldAndroidDetach from './OldAndroidDetach';\n\nimport Api from '../Api';\nimport ErrorCode from '../ErrorCode';\nimport * as ProjectUtils from '../project/ProjectUtils';\nimport UserManager from '../User';\nimport XDLError from '../XDLError';\nimport StandaloneBuildFlags from './StandaloneBuildFlags';\nimport StandaloneContext from './StandaloneContext';\nimport * as UrlUtils from '../UrlUtils';\nimport * as Versions from '../Versions';\nimport installPackageAsync from './installPackageAsync';\nimport logger from './Logger';\n\nasync function yesnoAsync(message) {\n  const { ok } = await inquirer.prompt([\n    {\n      type: 'confirm',\n      name: 'ok',\n      message,\n    },\n  ]);\n  return ok;\n}\n\nexport async function detachAsync(projectRoot: string, options: any = {}) {\n  let user = await UserManager.ensureLoggedInAsync();\n\n  if (!user) {\n    throw new Error('Internal error -- somehow detach is being run in offline mode.');\n  }\n\n  let username = user.username;\n  const { configName, configPath, configNamespace } = await ProjectUtils.findConfigFileAsync(\n    projectRoot\n  );\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  if (!exp) throw new Error(`Couldn't read ${configName}`);\n  if (!pkg) throw new Error(`Couldn't read package.json`);\n  let experienceName = `@${username}/${exp.slug}`;\n  let experienceUrl = `exp://exp.host/${experienceName}`;\n\n  // Check to make sure project isn't fully detached already\n  let hasIosDirectory = isDirectory(path.join(projectRoot, 'ios'));\n  let hasAndroidDirectory = isDirectory(path.join(projectRoot, 'android'));\n\n  if (hasIosDirectory && hasAndroidDirectory) {\n    throw new XDLError(\n      ErrorCode.DIRECTORY_ALREADY_EXISTS,\n      'Error detaching. `ios` and `android` directories already exist.'\n    );\n  }\n\n  // Project was already detached on Windows or Linux\n  if (!hasIosDirectory && hasAndroidDirectory && process.platform === 'darwin') {\n    let response = await yesnoAsync(\n      `This will add an Xcode project and leave your existing Android project alone. Enter 'yes' to continue:`\n    );\n    if (!response) {\n      logger.info('Exiting...');\n      return false;\n    }\n  }\n\n  if (hasIosDirectory && !hasAndroidDirectory) {\n    throw new Error('`ios` directory already exists. Please remove it and try again.');\n  }\n\n  logger.info('Validating project manifest...');\n  if (!exp.name) {\n    throw new Error(`${configName} is missing \\`name\\``);\n  }\n\n  if (!exp.sdkVersion) {\n    throw new Error(`${configName} is missing \\`sdkVersion\\``);\n  }\n\n  let majorSdkVersion = parseSdkMajorVersion(exp.sdkVersion);\n  if (majorSdkVersion < 16) {\n    throw new Error(`${configName} must be updated to SDK 16.0.0 or newer to be detached.`);\n  }\n\n  const versions = await Versions.versionsAsync();\n  let sdkVersionConfig = versions.sdkVersions[exp.sdkVersion];\n  if (\n    !sdkVersionConfig ||\n    !sdkVersionConfig.androidExpoViewUrl ||\n    !sdkVersionConfig.iosExpoViewUrl\n  ) {\n    if (process.env.EXPO_VIEW_DIR) {\n      logger.warn(\n        `Detaching is not supported for SDK ${exp.sdkVersion}; ignoring this because you provided EXPO_VIEW_DIR`\n      );\n      sdkVersionConfig = {};\n    } else {\n      throw new Error(`Detaching is not supported for SDK version ${exp.sdkVersion}`);\n    }\n  }\n\n  // Modify exp.json\n  exp.isDetached = true;\n\n  if (!exp.detach) {\n    exp.detach = {};\n  }\n\n  let detachedUUID = uuid.v4().replace(/-/g, '');\n  let generatedScheme = `exp${detachedUUID}`;\n\n  if (!exp.detach.scheme && !Versions.gteSdkVersion(exp, '27.0.0')) {\n    // set this for legacy purposes\n    exp.detach.scheme = generatedScheme;\n  }\n\n  if (!exp.scheme) {\n    logger.info(\n      `You have not specified a custom scheme for deep linking. A default value of ${generatedScheme} will be used. You can change this later by following the instructions in this guide: https://docs.expo.io/versions/latest/workflow/linking`\n    );\n    exp.scheme = generatedScheme;\n  }\n\n  let expoDirectory = path.join(projectRoot, '.expo-source');\n  mkdirp.sync(expoDirectory);\n  const context = StandaloneContext.createUserContext(projectRoot, exp, experienceUrl);\n\n  // iOS\n  let isIosSupported = true;\n  if (process.platform !== 'darwin') {\n    if (options && options.force) {\n      logger.warn(\n        `You are not running macOS, but have provided the --force option, so we will attempt to generate an iOS project anyway. This might fail.`\n      );\n    } else {\n      logger.warn(`Skipping iOS because you are not running macOS.`);\n      isIosSupported = false;\n    }\n  }\n\n  if (!hasIosDirectory && isIosSupported) {\n    if (!exp.ios) {\n      exp.ios = {};\n    }\n    if (!exp.ios.bundleIdentifier) {\n      logger.info(\n        `You'll need to specify an iOS bundle identifier. See: https://docs.expo.io/versions/latest/guides/configuration.html#bundleidentifier`\n      );\n      const { iosBundleIdentifier } = await inquirer.prompt([\n        {\n          name: 'iosBundleIdentifier',\n          message: 'What would you like your iOS bundle identifier to be?',\n          validate: value => /^[a-zA-Z][a-zA-Z0-9\\-\\.]+$/.test(value),\n        },\n      ]);\n      exp.ios.bundleIdentifier = iosBundleIdentifier;\n    }\n\n    await detachIOSAsync(context);\n    exp = IosWorkspace.addDetachedConfigToExp(exp, context);\n    exp.detach.iosExpoViewUrl = sdkVersionConfig.iosExpoViewUrl;\n  }\n\n  // Android\n  if (!hasAndroidDirectory) {\n    if (!exp.android) {\n      exp.android = {};\n    }\n    if (!exp.android.package) {\n      logger.info(\n        `You'll need to specify an Android package name. See: https://docs.expo.io/versions/latest/guides/configuration.html#package`\n      );\n      const { androidPackage } = await inquirer.prompt([\n        {\n          name: 'androidPackage',\n          message: 'What would you like your Android package name to be?',\n          validate: value =>\n            /^[a-zA-Z][a-zA-Z0-9\\_]*(\\.[a-zA-Z][a-zA-Z0-9\\_]*)+$/.test(value)\n              ? true\n              : \"Invalid format of Android package name (only alphanumeric characters, '.' and '_' are allowed, and each '.' must be followed by a letter)\",\n        },\n      ]);\n      exp.android.package = androidPackage;\n    }\n\n    let androidDirectory = path.join(expoDirectory, 'android');\n    rimraf.sync(androidDirectory);\n    mkdirp.sync(androidDirectory);\n    if (Versions.gteSdkVersion(exp, '24.0.0')) {\n      await detachAndroidAsync(context, sdkVersionConfig.androidExpoViewUrl);\n    } else {\n      await OldAndroidDetach.detachAndroidAsync(\n        projectRoot,\n        androidDirectory,\n        exp.sdkVersion,\n        experienceUrl,\n        exp,\n        sdkVersionConfig.androidExpoViewUrl\n      );\n    }\n    exp = AndroidShellApp.addDetachedConfigToExp(exp, context);\n    exp.detach.androidExpoViewUrl = sdkVersionConfig.androidExpoViewUrl;\n  }\n\n  logger.info('Writing ExpoKit configuration...');\n  // Update exp.json/app.json\n  // if we're writing to app.json, we need to place the configuration under the expo key\n  const config = configNamespace ? { [configNamespace]: exp } : exp;\n  await fs.writeFile(configPath, JSON.stringify(config, null, 2));\n\n  let reactNativeVersion, expoReactNativeTag;\n  if (sdkVersionConfig && sdkVersionConfig.expoReactNativeTag) {\n    expoReactNativeTag = sdkVersionConfig.expoReactNativeTag;\n    reactNativeVersion = `https://github.com/expo/react-native/archive/${expoReactNativeTag}.tar.gz`;\n  } else {\n    if (process.env.EXPO_VIEW_DIR) {\n      // ignore, using test directory\n    } else {\n      throw new Error(`Expo's React Native fork does not support this SDK version.`);\n    }\n  }\n  if (reactNativeVersion && pkg.dependencies['react-native'] !== reactNativeVersion) {\n    logger.info('Installing the Expo fork of react-native...');\n    const nodeModulesPath = exp.nodeModulesPath\n      ? path.resolve(projectRoot, exp.nodeModulesPath)\n      : projectRoot;\n    try {\n      await installPackageAsync(nodeModulesPath, 'react-native', reactNativeVersion, {\n        silent: true,\n      });\n    } catch (e) {\n      logger.warn('Unable to install the Expo fork of react-native.');\n      logger.warn(`Please install react-native@${reactNativeVersion} to complete detaching.`);\n      throw e;\n    }\n  }\n\n  logger.info(\n    'Finished detaching your project! Look in the `android` and `ios` directories for the respective native projects. Follow the ExpoKit guide at https://docs.expo.io/versions/latest/guides/expokit.html to get your project running.'\n  );\n  return true;\n}\n\n/**\n *  Create a detached Expo iOS app pointing at the given project.\n */\nasync function detachIOSAsync(context: StandaloneContext) {\n  await IosWorkspace.createDetachedAsync(context);\n\n  logger.info('Configuring iOS project...');\n  await IosNSBundle.configureAsync(context);\n\n  logger.info(`iOS detach is complete!`);\n}\n\nasync function detachAndroidAsync(context: StandaloneContext, expoViewUrl: string) {\n  if (context.type !== 'user') {\n    throw new Error(`detachAndroidAsync only supports user standalone contexts`);\n  }\n\n  logger.info('Moving Android project files...');\n  let androidProjectDirectory = path.join(context.data.projectPath, 'android');\n  let tmpExpoDirectory;\n  if (process.env.EXPO_VIEW_DIR) {\n    // Only for testing\n    await AndroidShellApp.copyInitialShellAppFilesAsync(\n      path.join(process.env.EXPO_VIEW_DIR, 'android'),\n      androidProjectDirectory,\n      true\n    );\n  } else {\n    tmpExpoDirectory = path.join(context.data.projectPath, 'temp-android-directory');\n    mkdirp.sync(tmpExpoDirectory);\n    logger.info('Downloading Android code...');\n    await Api.downloadAsync(expoViewUrl, tmpExpoDirectory, { extract: true });\n    await AndroidShellApp.copyInitialShellAppFilesAsync(\n      tmpExpoDirectory,\n      androidProjectDirectory,\n      true\n    );\n  }\n\n  logger.info('Updating Android app...');\n  await AndroidShellApp.runShellAppModificationsAsync(context, true);\n\n  // Clean up\n  logger.info('Cleaning up Android...');\n  if (!process.env.EXPO_VIEW_DIR) {\n    rimrafDontThrow(tmpExpoDirectory);\n  }\n  logger.info('Android detach is complete!\\n');\n}\n\nasync function ensureBuildConstantsExistsIOSAsync(configFilePath: string) {\n  // EXBuildConstants is included in newer ExpoKit projects.\n  // create it if it doesn't exist.\n  const doesBuildConstantsExist = fs.existsSync(\n    path.join(configFilePath, 'EXBuildConstants.plist')\n  );\n  if (!doesBuildConstantsExist) {\n    await IosPlist.createBlankAsync(configFilePath, 'EXBuildConstants');\n    logger.info('Created `EXBuildConstants.plist` because it did not exist yet');\n  }\n}\n\nasync function _getIosExpoKitVersionThrowErrorAsync(iosProjectDirectory: string) {\n  let expoKitVersion = '';\n  const podfileLockPath = path.join(iosProjectDirectory, 'Podfile.lock');\n  try {\n    const podfileLock = await fs.readFile(podfileLockPath, 'utf8');\n    const expoKitVersionRegex = /ExpoKit\\/Core\\W?\\(([0-9\\.]+)\\)/gi;\n    let match = expoKitVersionRegex.exec(podfileLock);\n    expoKitVersion = match[1];\n  } catch (e) {\n    throw new Error(\n      `Unable to read ExpoKit version from Podfile.lock. Make sure your project depends on ExpoKit. (${e})`\n    );\n  }\n  return expoKitVersion;\n}\n\nasync function prepareDetachedBuildIosAsync(projectDir: string, args: any) {\n  const { exp } = await ProjectUtils.readConfigJsonAsync(projectDir);\n  if (exp) {\n    return prepareDetachedUserContextIosAsync(projectDir, exp, args);\n  } else {\n    return prepareDetachedServiceContextIosAsync(projectDir, args);\n  }\n}\n\nasync function prepareDetachedServiceContextIosAsync(projectDir: string, args: any) {\n  // service context\n  // TODO: very brittle hack: the paths here are hard coded to match the single workspace\n  // path generated inside IosShellApp. When we support more than one path, this needs to\n  // be smarter.\n  const workspaceSourcePath = path.join(projectDir, 'default');\n  const buildFlags = StandaloneBuildFlags.createIos('Release', { workspaceSourcePath });\n  const context = StandaloneContext.createServiceContext(\n    path.join(projectDir, '..', '..'),\n    null,\n    null,\n    null,\n    /* testEnvironment */ 'none',\n    buildFlags,\n    null,\n    null\n  );\n  const { iosProjectDirectory, supportingDirectory } = IosWorkspace.getPaths(context);\n  const expoKitVersion = await _getIosExpoKitVersionThrowErrorAsync(iosProjectDirectory);\n\n  // use prod api keys if available\n  const prodApiKeys = await _readDefaultApiKeysAsync(\n    path.join(context.data.expoSourcePath, '__internal__', 'keys.json')\n  );\n\n  await IosPlist.modifyAsync(supportingDirectory, 'EXBuildConstants', constantsConfig => {\n    // verify that we are actually in a service context and not a misconfigured project\n    const contextType = constantsConfig.STANDALONE_CONTEXT_TYPE;\n    if (contextType !== 'service') {\n      throw new Error(\n        'Unable to configure a project which has no app.json and also no STANDALONE_CONTEXT_TYPE.'\n      );\n    }\n    constantsConfig.EXPO_RUNTIME_VERSION = expoKitVersion;\n    constantsConfig.API_SERVER_ENDPOINT =\n      process.env.ENVIRONMENT === 'staging'\n        ? 'https://staging.exp.host/--/api/v2/'\n        : 'https://exp.host/--/api/v2/';\n    if (prodApiKeys) {\n      constantsConfig.DEFAULT_API_KEYS = prodApiKeys;\n    }\n    return constantsConfig;\n  });\n}\n\nasync function _readDefaultApiKeysAsync(jsonFilePath: string) {\n  if (fs.existsSync(jsonFilePath)) {\n    let keys = {};\n    const allKeys = await new JsonFile(jsonFilePath).readAsync();\n    const validKeys = ['AMPLITUDE_KEY', 'GOOGLE_MAPS_IOS_API_KEY'];\n    for (const key in allKeys) {\n      if (allKeys.hasOwnProperty(key) && validKeys.includes(key)) {\n        keys[key] = allKeys[key];\n      }\n    }\n    return keys;\n  }\n  return null;\n}\n\nasync function prepareDetachedUserContextIosAsync(projectDir: string, exp: any, args: any) {\n  const context = StandaloneContext.createUserContext(projectDir, exp);\n  let { iosProjectDirectory, supportingDirectory } = IosWorkspace.getPaths(context);\n\n  logger.info(`Preparing iOS build at ${iosProjectDirectory}...`);\n  // These files cause @providesModule naming collisions\n  // but are not available until after `pod install` has run.\n  let podsDirectory = path.join(iosProjectDirectory, 'Pods');\n  if (!isDirectory(podsDirectory)) {\n    throw new Error(`Can't find directory ${podsDirectory}, make sure you've run pod install.`);\n  }\n  let rnPodDirectory = path.join(podsDirectory, 'React');\n  if (isDirectory(rnPodDirectory)) {\n    let rnFilesToDelete = await glob(rnPodDirectory + '/**/*.@(js|json)');\n    if (rnFilesToDelete) {\n      for (let i = 0; i < rnFilesToDelete.length; i++) {\n        await fs.unlink(rnFilesToDelete[i]);\n      }\n    }\n  }\n\n  // insert expo development url into iOS config\n  if (!args.skipXcodeConfig) {\n    // populate EXPO_RUNTIME_VERSION from ExpoKit pod version\n    const expoKitVersion = await _getIosExpoKitVersionThrowErrorAsync(iosProjectDirectory);\n\n    // populate development url\n    let devUrl = await UrlUtils.constructManifestUrlAsync(projectDir);\n\n    // populate default api keys\n    const defaultApiKeys = await _readDefaultApiKeysAsync(\n      path.join(podsDirectory, 'ExpoKit', 'template-files', 'keys.json')\n    );\n\n    await ensureBuildConstantsExistsIOSAsync(supportingDirectory);\n    await IosPlist.modifyAsync(supportingDirectory, 'EXBuildConstants', constantsConfig => {\n      constantsConfig.developmentUrl = devUrl;\n      constantsConfig.EXPO_RUNTIME_VERSION = expoKitVersion;\n      if (defaultApiKeys) {\n        constantsConfig.DEFAULT_API_KEYS = defaultApiKeys;\n      }\n      return constantsConfig;\n    });\n  }\n}\n\nexport async function prepareDetachedBuildAsync(projectDir: string, args: any) {\n  if (args.platform === 'ios') {\n    await prepareDetachedBuildIosAsync(projectDir, args);\n  } else {\n    let { exp } = await ProjectUtils.readConfigJsonAsync(projectDir);\n    let buildConstantsFileName = Versions.gteSdkVersion(exp, '24.0.0')\n      ? 'DetachBuildConstants.java'\n      : 'ExponentBuildConstants.java';\n\n    let androidProjectDirectory = path.join(projectDir, 'android');\n    let expoBuildConstantsMatches = await glob(\n      androidProjectDirectory + '/**/' + buildConstantsFileName\n    );\n    if (expoBuildConstantsMatches && expoBuildConstantsMatches.length) {\n      let expoBuildConstants = expoBuildConstantsMatches[0];\n      let devUrl = await UrlUtils.constructManifestUrlAsync(projectDir);\n      await regexFileAsync(\n        /DEVELOPMENT_URL \\= \\\"[^\\\"]*\\\"\\;/,\n        `DEVELOPMENT_URL = \"${devUrl}\";`,\n        expoBuildConstants\n      );\n    }\n  }\n}\n\ntype BundleAssetsArgs = {\n  platform: 'ios' | 'android',\n  // This is the path where assets will be copied to. It should be\n  // `$CONFIGURATION_BUILD_DIR/$UNLOCALIZED_RESOURCES_FOLDER_PATH` on iOS\n  // (see `exponent-view-template.xcodeproj/project.pbxproj` for an example)\n  // and `$buildDir/intermediates/assets/$targetPath` on Android (see\n  // `android/app/expo.gradle` for an example).\n  dest: string,\n};\n\nexport async function bundleAssetsAsync(projectDir: string, args: BundleAssetsArgs) {\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectDir);\n  if (!exp) {\n    // Don't run assets bundling for the service context.\n    return;\n  }\n  let publishManifestPath =\n    args.platform === 'ios' ? exp.ios.publishManifestPath : exp.android.publishManifestPath;\n  if (!publishManifestPath) {\n    logger.warn(\n      `Skipped assets bundling because the '${args.platform}.publishManifestPath' key is not specified in the app manifest.`\n    );\n    return;\n  }\n  let bundledManifestPath = path.join(projectDir, publishManifestPath);\n  let manifest;\n  try {\n    manifest = JSON.parse(await fs.readFile(bundledManifestPath, 'utf8'));\n  } catch (ex) {\n    throw new Error(\n      `Error reading the manifest file. Make sure the path '${bundledManifestPath}' is correct.\\n\\nError: ${ex.message}`\n    );\n  }\n\n  await AssetBundle.bundleAsync(manifest.bundledAssets, args.dest);\n}\n"],"sourceRoot":"/xdl@50.4.2/src"}