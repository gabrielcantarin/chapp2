{"version":3,"sources":["detach/IosPodsTools.js"],"names":["async","templatesDirectory","versionedReactNativePath","expoSubspecs","let","result","await","_concatTemplateFilesInDirectoryAsync","path","join","map","subspec","replace","_renderVersionedReactNativeDependenciesAsync","_renderVersionedReactNativePostinstallsAsync","directory","templateFilenames","glob","sort","templateStrings","fileIdx","nFiles","length","filename","templateString","fs","readFile","push","dependenciesConfigPath","options","dependencies","readAsync","type","isPodfile","noWarningsFlag","depsStrings","dependency","name","version","_renderPodDependenciesAsync","pathToTemplate","pathToOutput","moreSubstitutions","dirname","indentString","IOS_EXPONENT_CLIENT_VERSION","writeFile","renderExpoKitPodspecAsync","sdkVersion","reactNativePath","REACT_NATIVE_PATH","rnDependencyOptions","expoKitPath","EXPOKIT_PATH","expoKitTag","EXPOKIT_TAG","expoKitDependencyOptions","versionedRnPath","VERSIONED_REACT_NATIVE_PATH","rnExpoSubspecs","REACT_NATIVE_EXPO_SUBSPECS","versionedDependencies","versionedPostinstalls","podDependencies","substitutions","EXPONENT_CLIENT_DEPS","EXPOKIT_DEPENDENCY","_renderExpoKitDependency","PODFILE_UNVERSIONED_RN_DEPENDENCY","_renderUnversionedReactNativeDependency","PODFILE_UNVERSIONED_POSTINSTALL","_renderUnversionedPostinstall","PODFILE_DETACHED_POSTINSTALL","_renderDetachedPostinstall","PODFILE_DETACHED_SERVICE_POSTINSTALL","PODFILE_VERSIONED_RN_DEPENDENCIES","PODFILE_VERSIONED_POSTINSTALLS","PODFILE_TEST_TARGET","_renderTestTarget","_validatePodfileSubstitutions","key","hasOwnProperty","replacement","RegExp","renderPodfileAsync","validKeys","includes","Error","sdkMajorVersion","parseSdkMajorVersion","attributes","git","tag","branch","subspecs","inhibit_warnings","_renderDependencyAttributes","_renderUnversionedReactDependency","_renderUnversionedYogaDependency","glogLibraryName","_renderUnversionedThirdPartyDependency","podName","podspecRelativePath","podspec","attributesStrings","Object","keys","value","JSON","stringify","isServiceContext","podsRootSub","maybeDetachedServiceDef","podsToChangeDeployTarget","podsToChangeRB","pod","podsRoot"],"mappings":"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","file":"../../detach/IosPodsTools.js","sourcesContent":["// Copyright 2015-present 650 Industries. All rights reserved.\n\n'use strict';\n\nimport fs from 'fs-extra';\nimport glob from 'glob-promise';\nimport indentString from 'indent-string';\nimport JsonFile from '@expo/json-file';\nimport path from 'path';\n\nimport { parseSdkMajorVersion } from './ExponentTools';\n\nfunction _validatePodfileSubstitutions(substitutions) {\n  const validKeys = [\n    // a pod dependency on ExpoKit (can be local or remote)\n    'EXPOKIT_DEPENDENCY',\n    // local path to ExpoKit dependency\n    'EXPOKIT_PATH',\n    // tag to use for ExpoKit dependency\n    'EXPOKIT_TAG',\n    // the contents of dependencies.json enumerated as deps in podfile format\n    'EXPONENT_CLIENT_DEPS',\n    // postinstall for detached projects (defines EX_DETACHED among other things)\n    'PODFILE_DETACHED_POSTINSTALL',\n    // same as previous but also defines EX_DETACHED_SERVICE\n    'PODFILE_DETACHED_SERVICE_POSTINSTALL',\n    // ExponentIntegrationTests\n    'PODFILE_TEST_TARGET',\n    // unversioned react native pod dependency, probably at the path given in\n    // REACT_NATIVE_PATH, with a bunch of subspecs.\n    'PODFILE_UNVERSIONED_RN_DEPENDENCY',\n    // postinstall hook for unversioned deps\n    'PODFILE_UNVERSIONED_POSTINSTALL',\n    // versioned rn dependencies (paths to versioned-react-native directories)\n    // read from template files\n    'PODFILE_VERSIONED_RN_DEPENDENCIES',\n    // versioned rn postinstall hooks read from template files\n    'PODFILE_VERSIONED_POSTINSTALLS',\n    // list of generated Expo subspecs to include under a versioned react native dependency\n    'REACT_NATIVE_EXPO_SUBSPECS',\n    // path to use for the unversioned react native dependency\n    'REACT_NATIVE_PATH',\n    // name of the main build target, e.g. Exponent\n    'TARGET_NAME',\n    // path from Podfile to versioned-react-native\n    'VERSIONED_REACT_NATIVE_PATH',\n  ];\n\n  for (const key in substitutions) {\n    if (substitutions.hasOwnProperty(key)) {\n      if (!validKeys.includes(key)) {\n        throw new Error(`Unrecognized Podfile template key: ${key}`);\n      }\n    }\n  }\n  return true;\n}\n\nfunction _renderExpoKitDependency(options, sdkVersion) {\n  const sdkMajorVersion = parseSdkMajorVersion(sdkVersion);\n  let attributes;\n  if (options.expoKitPath) {\n    attributes = {\n      path: options.expoKitPath,\n    };\n  } else if (options.expoKitTag) {\n    attributes = {\n      git: 'http://github.com/expo/expo.git',\n      tag: options.expoKitTag,\n    };\n  } else {\n    attributes = {\n      git: 'http://github.com/expo/expo.git',\n      branch: 'master',\n    };\n  }\n\n  // GL subspec is available as of SDK 26\n  if (sdkMajorVersion < 26) {\n    attributes.subspecs = ['Core', 'CPP'];\n  } else {\n    attributes.subspecs = ['Core', 'CPP', 'GL'];\n  }\n  attributes.inhibit_warnings = true;\n\n  let dependency = `pod 'ExpoKit',\n${indentString(_renderDependencyAttributes(attributes), 2)}`;\n\n  return indentString(dependency, 2);\n}\n\n/**\n * @param sdkVersion if specified, indicates which sdkVersion this project uses\n *  as 'UNVERSIONED', e.g. if we are detaching a sdk15 project, we render\n *  an unversioned dependency pointing at RN#sdk-15.\n */\nfunction _renderUnversionedReactNativeDependency(options, sdkVersion) {\n  let sdkMajorVersion = parseSdkMajorVersion(sdkVersion);\n  if (sdkMajorVersion < 21) {\n    return indentString(\n      `\n${_renderUnversionedReactDependency(options, sdkVersion)}\n${_renderUnversionedYogaDependency(options, sdkVersion)}\n`,\n      2\n    );\n  } else {\n    const glogLibraryName = sdkMajorVersion < 26 ? 'GLog' : 'glog';\n    return indentString(\n      `\n${_renderUnversionedReactDependency(options, sdkVersion)}\n${_renderUnversionedYogaDependency(options, sdkVersion)}\n${_renderUnversionedThirdPartyDependency(\n        'DoubleConversion',\n        path.join('third-party-podspecs', 'DoubleConversion.podspec'),\n        options\n      )}\n${_renderUnversionedThirdPartyDependency(\n        'Folly',\n        path.join('third-party-podspecs', 'Folly.podspec'),\n        options\n      )}\n${_renderUnversionedThirdPartyDependency(\n        glogLibraryName,\n        path.join('third-party-podspecs', `${glogLibraryName}.podspec`),\n        options\n      )}\n`,\n      2\n    );\n  }\n}\n\nfunction _renderUnversionedReactDependency(options, sdkVersion) {\n  let attributes;\n  if (options.reactNativePath) {\n    attributes = {\n      path: options.reactNativePath,\n      inhibit_warnings: true,\n    };\n  } else {\n    throw new Error(`Unsupported options for RN dependency: ${options}`);\n  }\n\n  attributes.subspecs = [\n    'Core',\n    'ART',\n    'RCTActionSheet',\n    'RCTAnimation',\n    'RCTCameraRoll',\n    'RCTGeolocation',\n    'RCTImage',\n    'RCTNetwork',\n    'RCTText',\n    'RCTVibration',\n    'RCTWebSocket',\n  ];\n\n  let sdkMajorVersion = parseSdkMajorVersion(sdkVersion);\n  if (!(sdkMajorVersion < 16)) {\n    attributes.subspecs.push('DevSupport');\n  }\n  if (!(sdkMajorVersion < 21)) {\n    attributes.subspecs.push('CxxBridge');\n  } else if (!(sdkMajorVersion < 18)) {\n    attributes.subspecs.push('BatchedBridge');\n  }\n\n  return `pod 'React',\n${indentString(_renderDependencyAttributes(attributes), 2)}`;\n}\n\nfunction _renderUnversionedYogaDependency(options, sdkVersion) {\n  let attributes;\n  let sdkMajorVersion = parseSdkMajorVersion(sdkVersion);\n  if (options.reactNativePath) {\n    attributes = {\n      path: path.join(\n        options.reactNativePath,\n        'ReactCommon',\n        sdkMajorVersion < 22 ? 'Yoga' : 'yoga'\n      ),\n      inhibit_warnings: true,\n    };\n  } else {\n    throw new Error(`Unsupported options for Yoga dependency: ${options}`);\n  }\n  return `pod '${sdkMajorVersion < 22 ? 'Yoga' : 'yoga'}',\n${indentString(_renderDependencyAttributes(attributes), 2)}`;\n}\n\nfunction _renderUnversionedThirdPartyDependency(podName, podspecRelativePath, options) {\n  let attributes;\n  if (options.reactNativePath) {\n    attributes = {\n      podspec: path.join(options.reactNativePath, podspecRelativePath),\n      inhibit_warnings: true,\n    };\n  } else {\n    throw new Error(`Unsupported options for ${podName} dependency: ${options}`);\n  }\n  return `pod '${podName}',\n${indentString(_renderDependencyAttributes(attributes), 2)}`;\n}\n\nfunction _renderDependencyAttributes(attributes) {\n  let attributesStrings = [];\n  for (let key of Object.keys(attributes)) {\n    let value = JSON.stringify(attributes[key], null, 2);\n    attributesStrings.push(`:${key} => ${value}`);\n  }\n  return attributesStrings.join(',\\n');\n}\n\nasync function _renderVersionedReactNativeDependenciesAsync(\n  templatesDirectory,\n  versionedReactNativePath,\n  expoSubspecs\n) {\n  let result = await _concatTemplateFilesInDirectoryAsync(\n    path.join(templatesDirectory, 'versioned-react-native', 'dependencies')\n  );\n  expoSubspecs = expoSubspecs.map(subspec => `'${subspec}'`).join(', ');\n  result = result.replace(/\\$\\{VERSIONED_REACT_NATIVE_PATH\\}/g, versionedReactNativePath);\n  result = result.replace(/\\$\\{REACT_NATIVE_EXPO_SUBSPECS\\}/g, expoSubspecs);\n  return result;\n}\n\nasync function _renderVersionedReactNativePostinstallsAsync(templatesDirectory) {\n  return _concatTemplateFilesInDirectoryAsync(\n    path.join(templatesDirectory, 'versioned-react-native', 'postinstalls')\n  );\n}\n\nasync function _concatTemplateFilesInDirectoryAsync(directory) {\n  let templateFilenames = (await glob(path.join(directory, '*.rb'))).sort();\n  let templateStrings = [];\n  // perform this in series in order to get deterministic output\n  for (let fileIdx = 0, nFiles = templateFilenames.length; fileIdx < nFiles; fileIdx++) {\n    const filename = templateFilenames[fileIdx];\n    let templateString = await fs.readFile(filename, 'utf8');\n    if (templateString) {\n      templateStrings.push(templateString);\n    }\n  }\n  return templateStrings.join('\\n');\n}\n\nfunction _renderDetachedPostinstall(sdkVersion, isServiceContext) {\n  let podsRootSub = '${PODS_ROOT}';\n  const maybeDetachedServiceDef = isServiceContext\n    ? `config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'EX_DETACHED_SERVICE=1'`\n    : '';\n  return `\n    if target.pod_name == 'ExpoKit'\n      target.native_target.build_configurations.each do |config|\n        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'EX_DETACHED=1'\n        ${maybeDetachedServiceDef}\n        # needed for GoogleMaps 2.x\n        config.build_settings['FRAMEWORK_SEARCH_PATHS'] ||= []\n        config.build_settings['FRAMEWORK_SEARCH_PATHS'] << '${podsRootSub}/GoogleMaps/Base/Frameworks'\n        config.build_settings['FRAMEWORK_SEARCH_PATHS'] << '${podsRootSub}/GoogleMaps/Maps/Frameworks'\n      end\n    end\n`;\n}\n\nfunction _renderUnversionedPostinstall() {\n  // TODO: switch to `installer.pods_project.targets.each` in postinstall\n  // see: https://stackoverflow.com/questions/37160688/set-deployment-target-for-cocoapodss-pod\n  const podsToChangeDeployTarget = [\n    'Amplitude-iOS',\n    'Analytics',\n    'AppAuth',\n    'Branch',\n    'CocoaLumberjack',\n    'FBSDKCoreKit',\n    'FBSDKLoginKit',\n    'FBSDKShareKit',\n    'GPUImage',\n    'JKBigInteger2',\n  ];\n  const podsToChangeRB = `[${podsToChangeDeployTarget.map(pod => `'${pod}'`).join(',')}]`;\n  const podsRoot = '${PODS_ROOT}';\n  return `\n    if ${podsToChangeRB}.include? target.pod_name\n      target.native_target.build_configurations.each do |config|\n        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '9.0'\n      end\n    end\n    if target.pod_name == \"#{EXPO_CPP_HEADER_DIR}\"\n      target.native_target.build_configurations.each do |config|\n        config.build_settings['CLANG_WARN_COMMA'] = false\n        config.build_settings['CLANG_WARN_UNGUARDED_AVAILABILITY'] = false\n      end\n    end\n    # Can't specify this in the React podspec because we need\n    # to use those podspecs for detached projects which don't reference ExponentCPP.\n    if target.pod_name.start_with?('React')\n      target.native_target.build_configurations.each do |config|\n        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '9.0'\n        config.build_settings['HEADER_SEARCH_PATHS'] ||= ['$(inherited)']\n        config.build_settings['HEADER_SEARCH_PATHS'] << \"${podsRoot}/Headers/Public/#{EXPO_CPP_HEADER_DIR}\"\n      end\n    end\n    # Build React Native with RCT_DEV enabled\n    next unless target.pod_name == 'React'\n    target.native_target.build_configurations.each do |config|\n      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'RCT_DEV=1'\n    end\n`;\n}\n\nfunction _renderTestTarget(reactNativePath) {\n  return `\n  target 'ExponentIntegrationTests' do\n    inherit! :search_paths\n  end\n\n  target 'Tests' do\n    inherit! :search_paths\n  end\n`;\n}\n\nasync function _renderPodDependenciesAsync(dependenciesConfigPath, options) {\n  let dependencies = await new JsonFile(dependenciesConfigPath).readAsync();\n  const type = options.isPodfile ? 'pod' : 'ss.dependency';\n  const noWarningsFlag = options.isPodfile ? `, :inhibit_warnings => true` : '';\n  let depsStrings = dependencies.map(\n    dependency => `  ${type} '${dependency.name}', '${dependency.version}'${noWarningsFlag}`\n  );\n  return depsStrings.join('\\n');\n}\n\nasync function renderExpoKitPodspecAsync(pathToTemplate, pathToOutput, moreSubstitutions) {\n  let templatesDirectory = path.dirname(pathToTemplate);\n  let templateString = await fs.readFile(pathToTemplate, 'utf8');\n  let dependencies = await _renderPodDependenciesAsync(\n    path.join(templatesDirectory, 'dependencies.json'),\n    { isPodfile: false }\n  );\n  let result = templateString.replace(/\\$\\{IOS_EXPOKIT_DEPS\\}/g, indentString(dependencies, 2));\n  if (moreSubstitutions && moreSubstitutions.IOS_EXPONENT_CLIENT_VERSION) {\n    result = result.replace(\n      /\\$\\{IOS_EXPONENT_CLIENT_VERSION\\}/g,\n      moreSubstitutions.IOS_EXPONENT_CLIENT_VERSION\n    );\n  }\n\n  await fs.writeFile(pathToOutput, result);\n}\n\n/**\n *  @param pathToTemplate path to template Podfile\n *  @param pathToOutput path to render final Podfile\n *  @param moreSubstitutions dictionary of additional substitution keys and values to replace\n *         in the template, such as: TARGET_NAME, REACT_NATIVE_PATH\n */\nasync function renderPodfileAsync(\n  pathToTemplate,\n  pathToOutput,\n  moreSubstitutions,\n  sdkVersion = 'UNVERSIONED'\n) {\n  if (!moreSubstitutions) {\n    moreSubstitutions = {};\n  }\n  let templatesDirectory = path.dirname(pathToTemplate);\n  let templateString = await fs.readFile(pathToTemplate, 'utf8');\n\n  let reactNativePath = moreSubstitutions.REACT_NATIVE_PATH;\n  let rnDependencyOptions;\n  if (reactNativePath) {\n    rnDependencyOptions = { reactNativePath };\n  } else {\n    rnDependencyOptions = {};\n  }\n\n  const expoKitPath = moreSubstitutions.EXPOKIT_PATH;\n  const expoKitTag = moreSubstitutions.EXPOKIT_TAG;\n  let expoKitDependencyOptions = {};\n  if (expoKitPath) {\n    expoKitDependencyOptions = { expoKitPath };\n  } else if (expoKitTag) {\n    expoKitDependencyOptions = { expoKitTag };\n  }\n\n  let versionedRnPath = moreSubstitutions.VERSIONED_REACT_NATIVE_PATH;\n  if (!versionedRnPath) {\n    versionedRnPath = './versioned-react-native';\n  }\n  let rnExpoSubspecs = moreSubstitutions.REACT_NATIVE_EXPO_SUBSPECS;\n  if (!rnExpoSubspecs) {\n    rnExpoSubspecs = ['Expo'];\n  }\n\n  let versionedDependencies = await _renderVersionedReactNativeDependenciesAsync(\n    templatesDirectory,\n    versionedRnPath,\n    rnExpoSubspecs\n  );\n  let versionedPostinstalls = await _renderVersionedReactNativePostinstallsAsync(\n    templatesDirectory\n  );\n  let podDependencies = await _renderPodDependenciesAsync(\n    path.join(templatesDirectory, 'dependencies.json'),\n    { isPodfile: true }\n  );\n\n  let substitutions = {\n    EXPONENT_CLIENT_DEPS: podDependencies,\n    EXPOKIT_DEPENDENCY: _renderExpoKitDependency(expoKitDependencyOptions, sdkVersion),\n    PODFILE_UNVERSIONED_RN_DEPENDENCY: _renderUnversionedReactNativeDependency(\n      rnDependencyOptions,\n      sdkVersion\n    ),\n    PODFILE_UNVERSIONED_POSTINSTALL: _renderUnversionedPostinstall(),\n    PODFILE_DETACHED_POSTINSTALL: _renderDetachedPostinstall(sdkVersion, false),\n    PODFILE_DETACHED_SERVICE_POSTINSTALL: _renderDetachedPostinstall(sdkVersion, true),\n    PODFILE_VERSIONED_RN_DEPENDENCIES: versionedDependencies,\n    PODFILE_VERSIONED_POSTINSTALLS: versionedPostinstalls,\n    PODFILE_TEST_TARGET: _renderTestTarget(reactNativePath),\n    ...moreSubstitutions,\n  };\n  _validatePodfileSubstitutions(substitutions);\n\n  let result = templateString;\n  for (let key in substitutions) {\n    if (substitutions.hasOwnProperty(key)) {\n      let replacement = substitutions[key];\n      result = result.replace(new RegExp(`\\\\\\$\\\\\\{${key}\\\\\\}`, 'g'), replacement);\n    }\n  }\n\n  await fs.writeFile(pathToOutput, result);\n}\n\nexport { renderExpoKitPodspecAsync, renderPodfileAsync };\n"],"sourceRoot":"/xdl@50.4.2/src"}