{"version":3,"sources":["start.js"],"names":["ProjectSettings","readPackagerInfoAsync","process","cwd","settings","UrlUtils","constructManifestUrlAsync","address","emulatorHelp","platform","chalk","bold","qr","generate","qrCode","underline","cyan","printUsage","printServerInfo","key","CTRL_C","CTRL_D","emit","log","withTimestamp","Android","openProjectAsync","success","error","red","message","hostType","localAddress","Simulator","openUrlInSimulatorSafeAsync","msg","stopWaitingForCommand","lanAddress","UserSettings","getAsync","defaultRecipient","rl","readline","createInterface","input","stdin","output","stdout","handleKeypress","chr","name","cleanup","cancel","close","removeListener","startWaitingForCommand","addListener","question","sendTo","trim","sent","Exp","sendAsync","setAsync","reset","Project","startAsync","dev","Config","validation","reactNativeVersionWarnings","developerTool","offline","args","argv","slice","boolean","default","interactive","options","setRawMode","resume","setEncoding","on","isInteractive","packager","run","onReady","green","dim","devMode","iosInfo"],"mappings":"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","file":"start.js","sourcesContent":["// @flow\n\nimport { Android, Config, Project, ProjectSettings, Simulator, UrlUtils, UserSettings } from 'xdl';\n\nimport chalk from 'chalk';\nimport indent from 'indent-string';\nimport qr from 'qrcode-terminal';\nimport minimist from 'minimist';\nimport readline from 'readline';\nimport { Exp } from 'xdl';\n\nimport clearConsole from '../util/clearConsole';\nimport log from '../util/log';\nimport packager from '../util/packager';\n\nConfig.validation.reactNativeVersionWarnings = false;\nConfig.developerTool = 'crna';\nConfig.offline = true;\n\nconst args = minimist(process.argv.slice(2), {\n  boolean: ['reset-cache', 'interactive'],\n  default: { interactive: true },\n});\nlet dev = true;\n\nconst options = {};\nif (args['reset-cache']) {\n  options.reset = true;\n  log('Asking packager to reset its cache...');\n}\n\nconst { stdin } = process;\nconst startWaitingForCommand = () => {\n  stdin.setRawMode(true);\n  stdin.resume();\n  stdin.setEncoding('utf8');\n  stdin.on('data', handleKeypress);\n};\n\nconst stopWaitingForCommand = () => {\n  stdin.removeListener('data', handleKeypress);\n  stdin.setRawMode(false);\n  stdin.resume();\n};\n\nlet isInteractive = false;\nif (args.interactive && typeof stdin.setRawMode === 'function') {\n  startWaitingForCommand();\n  isInteractive = true;\n}\n\npackager.run(onReady, options, isInteractive);\n\nfunction onReady() {\n  log(chalk.green('Packager started!\\n'));\n  printServerInfo();\n}\n\n// print a nicely formatted message with setup information\nasync function printServerInfo() {\n  const settings = await ProjectSettings.readPackagerInfoAsync(process.cwd());\n  // who knows why qrcode-terminal takes a callback instead of just returning a string\n  const address = await UrlUtils.constructManifestUrlAsync(process.cwd());\n  let emulatorHelp;\n  if (process.platform === 'darwin') {\n    emulatorHelp = `Press ${chalk.bold('a')} (Android) or ${chalk.bold('i')} (iOS) to start an emulator.`;\n  } else {\n    emulatorHelp = `Press ${chalk.bold('a')} to start an Android emulator.`;\n  }\n  qr.generate(address, qrCode => {\n    log(`\n${indent(qrCode, 2)}\n\nYour app is now running at URL: ${chalk.underline(chalk.cyan(address))}\n\n${chalk.bold('View your app with live reloading:')}\n\n  ${chalk.underline('Android device:')}\n    -> Point the Expo app to the QR code above.\n       (You'll find the QR scanner on the Projects tab of the app.)\n  ${chalk.underline('iOS device:')}\n    -> Press ${chalk.bold('s')} to email/text the app URL to your phone.\n  ${chalk.underline('Emulator:')}\n    -> ${emulatorHelp}\n\nYour phone will need to be on the same local network as this computer.\nFor links to install the Expo app, please visit ${chalk.underline(chalk.cyan('https://expo.io'))}.\n\nLogs from serving your app will appear here. Press Ctrl+C at any time to stop.`\n    );\n    printUsage();\n  });\n}\n\nfunction printUsage() {\n  if (!isInteractive) {\n    return;\n  }\n  const { dim, bold } = chalk;\n  const devMode = dev ? 'development' : 'production';\n  const iosInfo = process.platform === 'darwin'\n    ? `${dim(`, or`)} i ${dim(`to open iOS emulator.`)}`\n    : dim('.');\n  log(\n    `\n ${dim(`\\u203A Press`)} a ${dim(`to open Android device or emulator`)}${iosInfo}\n ${dim(`\\u203A Press`)} s ${dim(`to send the app URL to your phone number or email address`)}\n ${dim(`\\u203A Press`)} q ${dim(`to display QR code.`)}\n ${dim(`\\u203A Press`)} r ${dim(`to restart packager, or`)} R ${dim(`to restart packager and clear cache.`)}\n ${dim(`\\u203A Press`)} d ${dim(`to toggle development mode. (current mode: ${bold(devMode)}${chalk.reset.dim(')')}`)}\n`\n  );\n}\n\nconst CTRL_C = '\\u0003';\nconst CTRL_D = '\\u0004';\n\nasync function handleKeypress(key) {\n  switch (key) {\n    case CTRL_C:\n    case CTRL_D:\n      process.emit('SIGINT');\n      return;\n    case 'a': {\n      clearConsole();\n      log.withTimestamp('Starting Android...');\n      const { success, error } = await Android.openProjectAsync(process.cwd());\n      if (!success) {\n        log(chalk.red(error.message));\n      }\n      printUsage();\n      return;\n    }\n    case 'i': {\n      clearConsole();\n      log.withTimestamp('Starting iOS...');\n      const localAddress = await UrlUtils.constructManifestUrlAsync(process.cwd(), {\n        hostType: 'localhost',\n      });\n      const { success, msg } = await Simulator.openUrlInSimulatorSafeAsync(localAddress);\n      if (!success) {\n        log(chalk.red(msg));\n      }\n      printUsage();\n      return;\n    }\n    case 's': {\n      stopWaitingForCommand();\n      const lanAddress = await UrlUtils.constructManifestUrlAsync(process.cwd(), {\n        hostType: 'lan',\n      });\n      const defaultRecipient = await UserSettings.getAsync('sendTo', null);\n      const rl = readline.createInterface({\n        input: process.stdin,\n        output: process.stdout,\n      });\n      const handleKeypress = (chr, key) => {\n        if (key && key.name === 'escape') {\n          cleanup();\n          cancel();\n        }\n      };\n      const cleanup = () => {\n        rl.close();\n        process.stdin.removeListener('keypress', handleKeypress);\n        startWaitingForCommand();\n      };\n      const cancel = () => {\n        clearConsole();\n        printUsage();\n      };\n      clearConsole();\n      process.stdin.addListener('keypress', handleKeypress);\n      log('Please enter your phone number or email address (press ESC to cancel) ');\n      rl.question(defaultRecipient ? `[default: ${defaultRecipient}]> ` : '> ', async sendTo => {\n        cleanup();\n        if (!sendTo && defaultRecipient) {\n          sendTo = defaultRecipient;\n        }\n        sendTo = sendTo && sendTo.trim();\n        if (!sendTo) {\n          cancel();\n          return;\n        }\n        log.withTimestamp(`Sending ${lanAddress} to ${sendTo}...`);\n\n        let sent = false;\n        try {\n          await Exp.sendAsync(sendTo, lanAddress, true);\n          log.withTimestamp(`Sent link successfully.`);\n          sent = true;\n        } catch (err) {\n          log.withTimestamp(`Could not send link. ${err}`);\n        }\n        printUsage();\n        if (sent) {\n          await UserSettings.setAsync('sendTo', sendTo);\n        }\n      });\n      return;\n    }\n    case 'q':\n      clearConsole();\n      await printServerInfo();\n      return;\n    case 'r':\n    case 'R': {\n      clearConsole();\n      const reset = key === 'R';\n      if (reset) {\n        log.withTimestamp('Asking packager to reset its cache...');\n      }\n      log.withTimestamp('Restarting packager...');\n      Project.startAsync(process.cwd(), { reset });\n      return;\n    }\n    case 'd':\n      clearConsole();\n      dev = !dev;\n      await ProjectSettings.setAsync(process.cwd(), { dev });\n      log(\n        `Packager now running in ${chalk.bold(dev ? 'development' : 'production')}${chalk.reset(` mode.`)}\n\nPlease close and reopen the project in the Expo app for the\nchange to take effect.`\n      );\n      printUsage();\n      return;\n  }\n}\n"]}